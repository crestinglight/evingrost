/*!40101 SET NAMES binary*/;
/*!40014 SET FOREIGN_KEY_CHECKS=0*/;
/*!40103 SET TIME_ZONE='+00:00' */;
INSERT INTO `wp_posts` VALUES
(1,1,"2017-10-25 16:09:25","2017-10-25 16:09:25","Welcome to WordPress. This is your first post. Edit or delete it, then start writing!","Hello world!","","trash","open","open","","hello-world__trashed","","","2017-10-25 16:24:33","2017-10-25 16:24:33","",0,"http://evingrost.dev/?p=1",0,"post","",1),
(2,1,"2017-10-25 16:09:25","2017-10-25 16:09:25","This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://evingrost.dev/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!","Sample Page","","trash","closed","open","","sample-page__trashed","","","2017-10-25 16:24:38","2017-10-25 16:24:38","",0,"http://evingrost.dev/?page_id=2",0,"page","",0),
(3,1,"2017-10-25 16:16:00","0000-00-00 00:00:00","","Auto Draft","","auto-draft","open","open","","","","","2017-10-25 16:16:00","0000-00-00 00:00:00","",0,"http://evingrost.dev/?p=3",0,"post","",0),
(7,1,"2017-10-25 16:24:33","2017-10-25 16:24:33","Welcome to WordPress. This is your first post. Edit or delete it, then start writing!","Hello world!","","inherit","closed","closed","","1-revision-v1","","","2017-10-25 16:24:33","2017-10-25 16:24:33","",1,"http://evingrost.dev/2017/10/25/1-revision-v1/",0,"revision","",0),
(8,1,"2017-10-25 16:24:38","2017-10-25 16:24:38","This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://evingrost.dev/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!","Sample Page","","inherit","closed","closed","","2-revision-v1","","","2017-10-25 16:24:38","2017-10-25 16:24:38","",2,"http://evingrost.dev/2017/10/25/2-revision-v1/",0,"revision","",0),
(9,1,"2017-10-25 16:44:43","2017-10-25 16:44:43","","Blog","","publish","closed","closed","","blog","","","2017-10-25 16:44:43","2017-10-25 16:44:43","",0,"http://evingrost.dev/?page_id=9",0,"page","",0),
(10,1,"2017-10-25 16:44:43","2017-10-25 16:44:43","","Blog","","inherit","closed","closed","","9-revision-v1","","","2017-10-25 16:44:43","2017-10-25 16:44:43","",9,"http://evingrost.dev/2017/10/25/9-revision-v1/",0,"revision","",0),
(11,1,"2017-10-25 17:20:41","2017-10-25 17:20:41","","Post Images","","trash","closed","closed","","acf_post-images__trashed","","","2017-10-25 17:29:46","2017-10-25 17:29:46","",0,"http://evingrost.dev/?post_type=acf&#038;p=11",0,"acf","",0),
(12,1,"2017-10-25 17:29:38","0000-00-00 00:00:00","","Auto Draft","","auto-draft","open","open","","","","","2017-10-25 17:29:38","0000-00-00 00:00:00","",0,"http://evingrost.dev/?p=12",0,"post","",0),
(13,1,"2017-10-14 17:47:04","2017-10-14 17:47:04","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\n<pre><span class=\"code__block\">   Our HTML:\r\n   &lt;h2 id=\"welcome\"&gt;&lt;/h2&gt;\r\n\r\n   Our JavaScript:\r\n   var welcomeNode = document.getElementById(\"welcome\");\r\n   welcomeNode.innerHTML = \"Welcome!\";\r\n\r\n   Our New HTML:\r\n   &lt;h2 id=\"welcome\"&gt;Welcome!&lt;/h2&gt;\r\n</span></pre>\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","publish","open","open","","the-dom-an-overview","","","2017-10-26 01:08:58","2017-10-26 01:08:58","",0,"http://evingrost.dev/?p=13",0,"post","",0),
(14,1,"2017-10-25 17:40:48","2017-10-25 17:40:48","","ComputerHD","","inherit","open","closed","","computerhd","","","2017-10-25 17:40:48","2017-10-25 17:40:48","",13,"http://evingrost.dev/wp-content/uploads/2017/10/ComputerHD.jpg",0,"attachment","image/jpeg",0),
(15,1,"2017-10-25 17:46:36","2017-10-25 17:46:36","","ComputerSmall","","inherit","open","closed","","computersmall","","","2017-10-25 17:46:36","2017-10-25 17:46:36","",13,"http://evingrost.dev/wp-content/uploads/2017/10/ComputerSmall.jpg",0,"attachment","image/jpeg",0),
(17,1,"2017-10-25 17:47:04","2017-10-25 17:47:04","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inlineCode\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 17:47:04","2017-10-25 17:47:04","",13,"http://evingrost.dev/2017/10/25/13-revision-v1/",0,"revision","",0),
(18,1,"2017-10-25 18:15:12","2017-10-25 18:15:12","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:15:12","2017-10-25 18:15:12","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(19,1,"2017-10-25 18:22:53","2017-10-25 18:22:53","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <h1>Welcome to my Site!</h2>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:22:53","2017-10-25 18:22:53","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(20,1,"2017-10-25 18:23:19","2017-10-25 18:23:19","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <code><h1>Welcome to my Site!</h2></code>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:23:19","2017-10-25 18:23:19","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(21,1,"2017-10-25 18:24:16","2017-10-25 18:24:16","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <code><span><h1></span>Welcome to my Site!<span></h2></span></code>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:24:16","2017-10-25 18:24:16","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(22,1,"2017-10-25 18:27:20","2017-10-25 18:27:20","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:27:20","2017-10-25 18:27:20","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(23,1,"2017-10-25 18:28:02","2017-10-25 18:28:02","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:28:02","2017-10-25 18:28:02","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(24,1,"2017-10-25 18:32:39","2017-10-25 18:32:39","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n      <div class=\"header\">\r\n\r\n		<div class=\"logo\">\r\n			<a href=\"#\"><img ...></a>\r\n		</div>\r\n\r\n	</div>\r\n</pre\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:32:39","2017-10-25 18:32:39","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(25,1,"2017-10-25 18:33:03","2017-10-25 18:33:03","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n      <span class=\"code__block\"><div class=\"header\">\r\n\r\n		<div class=\"logo\">\r\n			<a href=\"#\"><img ...></a>\r\n		</div>\r\n\r\n	</div></span>\r\n</pre\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:33:03","2017-10-25 18:33:03","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(26,1,"2017-10-25 18:34:20","2017-10-25 18:34:20","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;div class=\"header\"&gt;\r\n\r\n		&lt;div class=\"logo\"&gt;\r\n			&lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n		&lt;/div&gt;\r\n\r\n	lt;/div&gt;</span>\r\n</pre\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:34:20","2017-10-25 18:34:20","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(27,1,"2017-10-25 18:34:26","2017-10-25 18:34:26","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;div class=\"header\"&gt;\r\n\r\n		&lt;div class=\"logo\"&gt;\r\n			&lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n		&lt;/div&gt;\r\n\r\n	lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:34:26","2017-10-25 18:34:26","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(28,1,"2017-10-25 18:34:38","2017-10-25 18:34:38","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;div class=\"header\"&gt;\r\n\r\n		&lt;div class=\"logo\"&gt;\r\n			&lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n		&lt;/div&gt;\r\n\r\n	&lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:34:38","2017-10-25 18:34:38","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(29,1,"2017-10-25 18:36:10","2017-10-25 18:36:10","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\"> .  &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:36:10","2017-10-25 18:36:10","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(30,1,"2017-10-25 18:36:42","2017-10-25 18:36:42","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n      <span class=\"code__block\">&lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:36:42","2017-10-25 18:36:42","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(31,1,"2017-10-25 18:40:54","2017-10-25 18:40:54","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n<span class=\"code__block\"> .  &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:40:54","2017-10-25 18:40:54","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(32,1,"2017-10-25 18:41:08","2017-10-25 18:41:08","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:41:08","2017-10-25 18:41:08","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(33,1,"2017-10-25 18:42:10","2017-10-25 18:42:10","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\n\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\n\n<pre>\n<span class=\"code__block\">   &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\n</pre>\n\nThat is a DOM Node! Keep in mind that each element is its own Node.\n\nAnother example:\n\n<pre>\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\n\n      &lt;div class=\"logo\"&gt;\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\n      &lt;/div&gt;\n\n   &lt;/div&gt;</span>\n</pre>\n\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\n\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\n\nExample:\n\n<pre><span class=\"code__block\">\nOur HTML:\n	<h2 id=\"welcome\"></h2>\n\n	Our JavaScript:\n	var welcomeNode = document.getElementById(\"welcome\");\n	welcomeNode.innerHTML = \"Welcome!\";\n\n	Our New HTML:\n	<h2 id=\"welcome\">Welcome!</h2>\n</span></pre>\n\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-autosave-v1","","","2017-10-25 18:42:10","2017-10-25 18:42:10","",13,"http://evingrost.dev/13-autosave-v1/",0,"revision","",0),
(34,1,"2017-10-25 18:43:21","2017-10-25 18:43:21","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\n<pre><span class=\"code__block\">\r\n   Our HTML:\r\n   &lt;h2 id=\"welcome\"&gt;&lt;/h2&gt;\r\n\r\n   Our JavaScript:\r\n   var welcomeNode = document.getElementById(\"welcome\");\r\n   welcomeNode.innerHTML = \"Welcome!\";\r\n\r\n   Our New HTML:\r\n   &lt;h2 id=\"welcome\"&gt;Welcome!&lt;/h2&gt;\r\n</span></pre>\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:43:21","2017-10-25 18:43:21","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(35,1,"2017-10-25 18:50:31","2017-10-25 18:50:31","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\n<pre><span class=\"code__block\">   Our HTML:\r\n   &lt;h2 id=\"welcome\"&gt;&lt;/h2&gt;\r\n\r\n   Our JavaScript:\r\n   var welcomeNode = document.getElementById(\"welcome\");\r\n   welcomeNode.innerHTML = \"Welcome!\";\r\n\r\n   Our New HTML:\r\n   &lt;h2 id=\"welcome\"&gt;Welcome!&lt;/h2&gt;\r\n</span></pre>\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 18:50:31","2017-10-25 18:50:31","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(36,1,"2017-10-25 19:01:15","2017-10-25 19:01:15","Vivamus ante eros, maximus pellentesque dapibus vel, porttitor at sem. Proin iaculis tempor ipsum eu dictum. Sed risus metus, commodo ac ligula quis, feugiat mattis lectus. Pellentesque vulputate lorem quis nulla tristique cursus. Mauris id aliquam leo, eget iaculis erat. Suspendisse tincidunt pharetra turpis, vitae maximus eros tempor id. Vivamus turpis diam, interdum laoreet tempus ac, placerat quis ipsum. Etiam pretium non nulla lacinia rhoncus. Mauris et tristique tortor.\r\n\r\nEtiam faucibus, justo a varius faucibus, metus lacus auctor sem, vel tincidunt enim lectus et nisl. Vivamus dui magna, pellentesque ac leo blandit, imperdiet laoreet nisi. Nunc non mauris viverra, aliquet nunc nec, lacinia metus. Vivamus in risus eu erat sodales ultrices ut sed magna. Morbi at lacus blandit lectus fermentum rutrum vitae non urna. Nunc cursus molestie turpis, sit amet blandit orci volutpat ut. Nulla ultrices elementum posuere. Nam hendrerit mauris fermentum est aliquet, egestas iaculis metus laoreet. Aenean ac sodales dui.\r\n\r\nNam ut aliquam diam. Phasellus congue enim vel malesuada iaculis. Vivamus congue eu quam sit amet elementum. Vestibulum in facilisis tellus, at interdum quam. Maecenas vitae odio vel odio porta egestas. Ut arcu urna, volutpat quis scelerisque hendrerit, tristique id odio. Vivamus aliquet efficitur ante eget consequat. Quisque sed leo imperdiet, dignissim nunc nec, posuere dolor. Vestibulum sagittis nisi a sapien porttitor auctor. Vivamus id neque quis tortor malesuada porttitor et sed dolor.\r\n\r\nVestibulum rutrum condimentum quam, at aliquet enim viverra in. Duis nec tincidunt tortor, dapibus ullamcorper nisi. Aliquam faucibus vel ante sed molestie. Donec et enim pulvinar, mattis risus sed, ornare quam. Phasellus finibus, risus at sagittis lacinia, mi arcu finibus arcu, vitae elementum tellus nunc tempus orci. In sit amet enim nec est sollicitudin blandit. Duis fermentum ut mi at lobortis. Phasellus et ultrices quam. In nec leo facilisis, semper odio vel, lacinia diam. In mollis vestibulum fermentum. Pellentesque a metus sed ipsum suscipit fringilla vulputate nec metus.\r\n\r\nProin neque elit, congue eget felis at, lobortis semper velit. Aliquam bibendum aliquam tincidunt. Suspendisse potenti. Donec lacinia tempus metus, sed sagittis nunc condimentum eu. In tempus eros magna, vitae fermentum metus cursus nec. Quisque imperdiet ex mi, ac vestibulum neque imperdiet ut. Vestibulum quis sapien magna. Etiam sed feugiat elit, eget feugiat augue. Cras ullamcorper ut sapien eu maximus. Sed vulputate mauris odio, vel mattis ex tincidunt non.","Test Post","","trash","open","open","","test-post__trashed","","","2017-10-25 19:34:24","2017-10-25 19:34:24","",0,"http://evingrost.dev/?p=36",0,"post","",0),
(37,1,"2017-10-25 19:01:15","2017-10-25 19:01:15","Vivamus ante eros, maximus pellentesque dapibus vel, porttitor at sem. Proin iaculis tempor ipsum eu dictum. Sed risus metus, commodo ac ligula quis, feugiat mattis lectus. Pellentesque vulputate lorem quis nulla tristique cursus. Mauris id aliquam leo, eget iaculis erat. Suspendisse tincidunt pharetra turpis, vitae maximus eros tempor id. Vivamus turpis diam, interdum laoreet tempus ac, placerat quis ipsum. Etiam pretium non nulla lacinia rhoncus. Mauris et tristique tortor.\r\n\r\nEtiam faucibus, justo a varius faucibus, metus lacus auctor sem, vel tincidunt enim lectus et nisl. Vivamus dui magna, pellentesque ac leo blandit, imperdiet laoreet nisi. Nunc non mauris viverra, aliquet nunc nec, lacinia metus. Vivamus in risus eu erat sodales ultrices ut sed magna. Morbi at lacus blandit lectus fermentum rutrum vitae non urna. Nunc cursus molestie turpis, sit amet blandit orci volutpat ut. Nulla ultrices elementum posuere. Nam hendrerit mauris fermentum est aliquet, egestas iaculis metus laoreet. Aenean ac sodales dui.\r\n\r\nNam ut aliquam diam. Phasellus congue enim vel malesuada iaculis. Vivamus congue eu quam sit amet elementum. Vestibulum in facilisis tellus, at interdum quam. Maecenas vitae odio vel odio porta egestas. Ut arcu urna, volutpat quis scelerisque hendrerit, tristique id odio. Vivamus aliquet efficitur ante eget consequat. Quisque sed leo imperdiet, dignissim nunc nec, posuere dolor. Vestibulum sagittis nisi a sapien porttitor auctor. Vivamus id neque quis tortor malesuada porttitor et sed dolor.\r\n\r\nVestibulum rutrum condimentum quam, at aliquet enim viverra in. Duis nec tincidunt tortor, dapibus ullamcorper nisi. Aliquam faucibus vel ante sed molestie. Donec et enim pulvinar, mattis risus sed, ornare quam. Phasellus finibus, risus at sagittis lacinia, mi arcu finibus arcu, vitae elementum tellus nunc tempus orci. In sit amet enim nec est sollicitudin blandit. Duis fermentum ut mi at lobortis. Phasellus et ultrices quam. In nec leo facilisis, semper odio vel, lacinia diam. In mollis vestibulum fermentum. Pellentesque a metus sed ipsum suscipit fringilla vulputate nec metus.\r\n\r\nProin neque elit, congue eget felis at, lobortis semper velit. Aliquam bibendum aliquam tincidunt. Suspendisse potenti. Donec lacinia tempus metus, sed sagittis nunc condimentum eu. In tempus eros magna, vitae fermentum metus cursus nec. Quisque imperdiet ex mi, ac vestibulum neque imperdiet ut. Vestibulum quis sapien magna. Etiam sed feugiat elit, eget feugiat augue. Cras ullamcorper ut sapien eu maximus. Sed vulputate mauris odio, vel mattis ex tincidunt non.","Test Post","","inherit","closed","closed","","36-revision-v1","","","2017-10-25 19:01:15","2017-10-25 19:01:15","",36,"http://evingrost.dev/36-revision-v1/",0,"revision","",0),
(38,1,"2017-10-25 19:01:24","2017-10-25 19:01:24","The acronym “DOM” stands for the Document Object Model. The Document Object Model allows us to use Javascript to create dynamic pages by controlling elements of the HTML.\r\n\r\nThe DOM works like a tree. The root of the tree is the “Document”, and it’s child is the HTML element. From here, we typically see the tree branch into the head and body elements, and both of those elements have direct children as well. Each element in the DOM is called a “Node”. For example, if you have a tag like this:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;h1&gt;Welcome to my Site!&lt;/h2&gt;</span>\r\n</pre>\r\n\r\nThat is a DOM Node! Keep in mind that each element is its own Node.\r\n\r\nAnother example:\r\n\r\n<pre>\r\n<span class=\"code__block\">   &lt;div class=\"header\"&gt;\r\n\r\n      &lt;div class=\"logo\"&gt;\r\n         &lt;a href=\"#\"&gt;&lt;img ...&gt;&lt;/a&gt;\r\n      &lt;/div&gt;\r\n\r\n   &lt;/div&gt;</span>\r\n</pre>\r\n\r\nIn this example, the “header” div is its own element, and therefore, it is a Node. Then the “logo” is a child Node of the header Node. The “link” element is then a child Node of the logo Node. Each element is a Node. This kind of node structure allows Javascript to move fluidly through the HTML, and work dynamically with these nodes in order to change, add, remove, or otherwise alter each of these elements, giving developers the ability to integrate user interaction and dynamically generated pages.\r\n\r\nWith our JavaScript, we can target these nodes through code that looks like this: <span class=\"inline__code\">var headerNode = document.getElementsByClassName(“header”);</span>. JavaScript has a lot of built-in functionality regarding the DOM, like changing or adding classes, altering link destinations, changing the CSS styling of a single node, or even altering the inner HTML of a tag.\r\n\r\nExample:\r\n\r\n<pre><span class=\"code__block\">   Our HTML:\r\n   &lt;h2 id=\"welcome\"&gt;&lt;/h2&gt;\r\n\r\n   Our JavaScript:\r\n   var welcomeNode = document.getElementById(\"welcome\");\r\n   welcomeNode.innerHTML = \"Welcome!\";\r\n\r\n   Our New HTML:\r\n   &lt;h2 id=\"welcome\"&gt;Welcome!&lt;/h2&gt;\r\n</span></pre>\r\n\r\nNotice how we were able to target the inner HTML of our h2 welcome tag with JavaScript, then change what is contained within this tag? The DOM is incredibly powerful, allowing us to make nodes disappear and reappear, insert the user’s name into our HTML, and make all kinds of changes tailored to the user and their interaction with our site. For more information on the DOM and several of its uses, <a href=\"https://www.w3schools.com/js/js_htmldom.asp\">check this out</a>.","The DOM - An Overview","","inherit","closed","closed","","13-revision-v1","","","2017-10-25 19:01:24","2017-10-25 19:01:24","",13,"http://evingrost.dev/13-revision-v1/",0,"revision","",0),
(39,1,"2017-10-25 19:02:06","2017-10-25 19:02:06","Vivamus ante eros, maximus pellentesque dapibus vel, porttitor at sem. Proin iaculis tempor ipsum eu dictum. Sed risus metus, commodo ac ligula quis, feugiat mattis lectus. Pellentesque vulputate lorem quis nulla tristique cursus. Mauris id aliquam leo, eget iaculis erat. Suspendisse tincidunt pharetra turpis, vitae maximus eros tempor id. Vivamus turpis diam, interdum laoreet tempus ac, placerat quis ipsum. Etiam pretium non nulla lacinia rhoncus. Mauris et tristique tortor.\r\n\r\nEtiam faucibus, justo a varius faucibus, metus lacus auctor sem, vel tincidunt enim lectus et nisl. Vivamus dui magna, pellentesque ac leo blandit, imperdiet laoreet nisi. Nunc non mauris viverra, aliquet nunc nec, lacinia metus. Vivamus in risus eu erat sodales ultrices ut sed magna. Morbi at lacus blandit lectus fermentum rutrum vitae non urna. Nunc cursus molestie turpis, sit amet blandit orci volutpat ut. Nulla ultrices elementum posuere. Nam hendrerit mauris fermentum est aliquet, egestas iaculis metus laoreet. Aenean ac sodales dui.\r\n\r\nNam ut aliquam diam. Phasellus congue enim vel malesuada iaculis. Vivamus congue eu quam sit amet elementum. Vestibulum in facilisis tellus, at interdum quam. Maecenas vitae odio vel odio porta egestas. Ut arcu urna, volutpat quis scelerisque hendrerit, tristique id odio. Vivamus aliquet efficitur ante eget consequat. Quisque sed leo imperdiet, dignissim nunc nec, posuere dolor. Vestibulum sagittis nisi a sapien porttitor auctor. Vivamus id neque quis tortor malesuada porttitor et sed dolor.\r\n\r\nVestibulum rutrum condimentum quam, at aliquet enim viverra in. Duis nec tincidunt tortor, dapibus ullamcorper nisi. Aliquam faucibus vel ante sed molestie. Donec et enim pulvinar, mattis risus sed, ornare quam. Phasellus finibus, risus at sagittis lacinia, mi arcu finibus arcu, vitae elementum tellus nunc tempus orci. In sit amet enim nec est sollicitudin blandit. Duis fermentum ut mi at lobortis. Phasellus et ultrices quam. In nec leo facilisis, semper odio vel, lacinia diam. In mollis vestibulum fermentum. Pellentesque a metus sed ipsum suscipit fringilla vulputate nec metus.\r\n\r\nProin neque elit, congue eget felis at, lobortis semper velit. Aliquam bibendum aliquam tincidunt. Suspendisse potenti. Donec lacinia tempus metus, sed sagittis nunc condimentum eu. In tempus eros magna, vitae fermentum metus cursus nec. Quisque imperdiet ex mi, ac vestibulum neque imperdiet ut. Vestibulum quis sapien magna. Etiam sed feugiat elit, eget feugiat augue. Cras ullamcorper ut sapien eu maximus. Sed vulputate mauris odio, vel mattis ex tincidunt non.","Test Post 02","","trash","open","open","","test-post-02__trashed","","","2017-10-25 19:34:24","2017-10-25 19:34:24","",0,"http://evingrost.dev/?p=39",0,"post","",0),
(40,1,"2017-10-25 19:02:06","2017-10-25 19:02:06","Vivamus ante eros, maximus pellentesque dapibus vel, porttitor at sem. Proin iaculis tempor ipsum eu dictum. Sed risus metus, commodo ac ligula quis, feugiat mattis lectus. Pellentesque vulputate lorem quis nulla tristique cursus. Mauris id aliquam leo, eget iaculis erat. Suspendisse tincidunt pharetra turpis, vitae maximus eros tempor id. Vivamus turpis diam, interdum laoreet tempus ac, placerat quis ipsum. Etiam pretium non nulla lacinia rhoncus. Mauris et tristique tortor.\r\n\r\nEtiam faucibus, justo a varius faucibus, metus lacus auctor sem, vel tincidunt enim lectus et nisl. Vivamus dui magna, pellentesque ac leo blandit, imperdiet laoreet nisi. Nunc non mauris viverra, aliquet nunc nec, lacinia metus. Vivamus in risus eu erat sodales ultrices ut sed magna. Morbi at lacus blandit lectus fermentum rutrum vitae non urna. Nunc cursus molestie turpis, sit amet blandit orci volutpat ut. Nulla ultrices elementum posuere. Nam hendrerit mauris fermentum est aliquet, egestas iaculis metus laoreet. Aenean ac sodales dui.\r\n\r\nNam ut aliquam diam. Phasellus congue enim vel malesuada iaculis. Vivamus congue eu quam sit amet elementum. Vestibulum in facilisis tellus, at interdum quam. Maecenas vitae odio vel odio porta egestas. Ut arcu urna, volutpat quis scelerisque hendrerit, tristique id odio. Vivamus aliquet efficitur ante eget consequat. Quisque sed leo imperdiet, dignissim nunc nec, posuere dolor. Vestibulum sagittis nisi a sapien porttitor auctor. Vivamus id neque quis tortor malesuada porttitor et sed dolor.\r\n\r\nVestibulum rutrum condimentum quam, at aliquet enim viverra in. Duis nec tincidunt tortor, dapibus ullamcorper nisi. Aliquam faucibus vel ante sed molestie. Donec et enim pulvinar, mattis risus sed, ornare quam. Phasellus finibus, risus at sagittis lacinia, mi arcu finibus arcu, vitae elementum tellus nunc tempus orci. In sit amet enim nec est sollicitudin blandit. Duis fermentum ut mi at lobortis. Phasellus et ultrices quam. In nec leo facilisis, semper odio vel, lacinia diam. In mollis vestibulum fermentum. Pellentesque a metus sed ipsum suscipit fringilla vulputate nec metus.\r\n\r\nProin neque elit, congue eget felis at, lobortis semper velit. Aliquam bibendum aliquam tincidunt. Suspendisse potenti. Donec lacinia tempus metus, sed sagittis nunc condimentum eu. In tempus eros magna, vitae fermentum metus cursus nec. Quisque imperdiet ex mi, ac vestibulum neque imperdiet ut. Vestibulum quis sapien magna. Etiam sed feugiat elit, eget feugiat augue. Cras ullamcorper ut sapien eu maximus. Sed vulputate mauris odio, vel mattis ex tincidunt non.","Test Post 02","","inherit","closed","closed","","39-revision-v1","","","2017-10-25 19:02:06","2017-10-25 19:02:06","",39,"http://evingrost.dev/39-revision-v1/",0,"revision","",0),
(41,1,"2017-10-16 20:11:23","2017-10-16 20:11:23","Welcome to the Where\'s Waldo coding tutorial, where we\'re going to discuss the basics of creating a Where\'s Waldo game that you can play with your friends and family!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/Waldo-241x300.jpg\" alt=\"Hello Waldo!\" class=\"l-image__centered--smaller\" />\r\n\r\n<h2>Our Basic HTML</h2>\r\n\r\nFor this tutorial, we\'ll start by going over our basic HTML. HTML provides us with the building blocks we need to get started putting our site together. Surprisingly, we don\'t need as much as you may think. Here is all of the HTML we\'ll be working with:\r\n\r\n<pre><span class=\"code__block\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en-us\"&gt;\r\n\r\n   &lt;head&gt;\r\n      &lt;meta charset=\"utf-8\"&gt;\r\n      &lt;title&gt;-Where\'s Waldo? Picture #1-&lt;/title&gt;\r\n      &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\r\n      &lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\r\n   &lt;/head&gt;\r\n\r\n   &lt;body&gt;\r\n      &lt;div class=\"wrapper\"&gt;\r\n         &lt;h1&gt;Level 1 - Very Easy&lt;/h1&gt;\r\n         &lt;br&gt;\r\n         &lt;div class=\"gameWindow\"&gt;\r\n            &lt;img src=\"images/Waldo01-easy.jpg\" class=\"searchImage\" id=\"WaldoLevel1\"&gt;\r\n            &lt;h2 id=\"timeLapsed\"&gt;&lt;/h2&gt;\r\n         &lt;/div&gt;\r\n         &lt;p&gt;Find Waldo!&lt;/p&gt;\r\n\r\n         &lt;div id=\"modal\" style=\"display: none\"&gt;&lt;/div&gt;\r\n\r\n         &lt;div id=\"modalContent\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalTimer\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"modalMessage\"&gt;Good job!&lt;/div&gt;\r\n            &lt;form action=\"#\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  \r\n         &lt;/div&gt;\r\n\r\n         &lt;div id=\"modalHighScore\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalHighScoresTitle\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"actualHighScores\"&gt;&lt;/div&gt;\r\n            &lt;form action=\"\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  	\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</span></pre>\r\n\r\n<h3>Note: For now, don\'t worry about the naming convention or folder placement of this file, as we will change it later. Just name the file what you\'d like and place it somewhere inside of your project where you will remember it.</h3>\r\n\r\nIn the head tag, we\'re just telling the program what we would like the title of our page to be, and which files we would like connected to this HTML file, the CSS stylesheet, and our Javascript file.\r\n\r\nWithin the body and wrapper divs, we have the label of what level we\'re on, in this case level 1, and the image we would like the player to search. There are hundreds of Where\'s Waldo images we can use, so pick one that you like!\r\n\r\nFinally, our \"modal\" div will contain the structure we need in order to show the window that will pop up after the user has found Waldo. It will contain the amount of time it took for the user to find Waldo, a short message confirming they found Waldo, and two buttons, \"Next Puzzle\", and \"High Scores\". Notice the \"high score\" modal is exactly the same as the modal content block, just with a few different names.\r\n\r\n<h2>Time for Some Cascading Style</h2>\r\n\r\nNow we\'ll take a look at the CSS file, or Cascading Style Sheet. This file allows us to format our HTML elements and make them look nice, and stay where we want them to on the page. Take a look through the file below:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n\r\n.wrapper {\r\n   background-color: rgba(255, 250, 224, 0.7);\r\n   padding-left: 10px;\r\n   padding-right: 10px;\r\n   padding-bottom: 10px;\r\n   margin-top: -3000px;\r\n   margin-bottom: -10px;\r\n   padding-top: 3000px;\r\n   box-shadow: 0px 0px 10px #918952;\r\n   min-height: 100%;\r\n}\r\n\r\nh1 {\r\n   font-family: sans-serif;\r\n   text-align: center;\r\n   color: #4c4c4c;\r\n}\r\n\r\np {\r\n   font-family: sans-serif;\r\n   text-align: justify;\r\n   padding-right: 10px;\r\n   padding-left: 10px;\r\n   color: #4c4c4c;\r\n}\r\n\r\ninput[type=submit] {\r\n   display: block;\r\n   width: 120px;\r\n   height: 60px;\r\n   font-family: sans-serif;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#waldoBasic {\r\n   display: block;\r\n   width: 250px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   border-style: dashed;\r\n   border-width: 2px;\r\n   border-color: black;\r\n}\r\n\r\n.searchImage {\r\n   display: block;\r\n   width: 750px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   box-shadow: 0px 0px 8px black;\r\n}\r\n\r\n#timeLapsed {\r\n   display: none;\r\n}\r\n\r\n#modal{\r\n   background: rgba(0,0,0,0.5);\r\n   position: fixed;\r\n   z-index: 9950;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   top: 0;\r\n   left: 0;\r\n}\r\n\r\n#modalContent {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 120px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalHighScore {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 20px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalMessage {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalHighScoresTitle {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#actualHighScores {\r\n   font-family: sans-serif;\r\n   font-size: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalNext input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   right: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalHighScoreButton input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   left: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #2483e2;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalTimer {\r\n   text-align: center;\r\n   font-family: sans-serif;\r\n   font-weight: bold;\r\n   font-size: 5em;\r\n   line-height: 2em;\r\n   text-shadow: -1px 0 yellow, 0 1px yellow, 1px 0 yellow, 0 -1px yellow;\r\n   -webkit-transform:scale(1,1.5); /* Safari and Chrome */\r\n   -moz-transform:scale(1,1.5); /* Firefox */\r\n   -ms-transform:scale(1,1.5); /* IE 9 */\r\n   -o-transform:scale(1,1.5); /* Opera */\r\n   transform:scale(1,1.5); /* W3C */\r\n}</span></pre>\r\n\r\nAt first, this file may look a bit intimidating, but don\'t worry! It\'s very repetitive. Let\'s break it down:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n</span></pre>\r\n\r\nIn CSS, each tag targets an HTML element, and styles that element to the specifications in the CSS. So in this example, the width of the HTML element \"body\" has been set to 800 pixels, the background color has been set to a pale yellow, and the body\'s alignment is centered, using the \"margin-left: auto\" and \"margin-right: auto\" lines. We can apply these principles universally by targeting whatevera element we want (h1, p, a, etc.), and styling the aspects of that tag in the way we want. We can even create custom style-types easily by entering div tags in our HTML file with a custom class name, then targeting that class with our CSS in this format: <span class=\"inline__code\">.class-name { styles }</span>. Feel free to play around with these different tags, options, colors, and styles to create your own unique page!\r\n\r\n<h3>Note: For more information on CSS and some of the styling options available, <a href=\"https://www.w3schools.com/Css/\" target=\"_blank\">check out this tutorial</a>.</h3>","Where\'s Waldo? - Part One","","publish","open","open","","wheres-waldo-part-one","","","2017-10-26 01:09:04","2017-10-26 01:09:04","",0,"http://evingrost.dev/?p=41",0,"post","",0),
(42,1,"2017-10-25 19:48:27","2017-10-25 19:48:27","","Waldo","","inherit","open","closed","","waldo","","","2017-10-25 19:48:27","2017-10-25 19:48:27","",41,"http://evingrost.dev/wp-content/uploads/2017/10/Waldo.jpg",0,"attachment","image/jpeg",0),
(43,1,"2017-10-25 19:59:25","2017-10-25 19:59:25","Welcome to the Where\'s Waldo coding tutorial, where we\'re going to discuss the basics of creating a Where\'s Waldo game that you can play with your friends and family!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/Waldo-241x300.jpg\" alt=\"Hello Waldo!\" class=\"image--centered\" />\r\n\r\n<h2>Our Basic HTML</h2>\r\n\r\nFor this tutorial, we\'ll start by going over our basic HTML. HTML provides us with the building blocks we need to get started putting our site together. Surprisingly, we don\'t need as much as you may think. Here is all of the HTML we\'ll be working with:\r\n\r\n<pre><span class=\"code__block\"><!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n\r\n   <head>\r\n      <meta charset=\"utf-8\">\r\n      <title>-Where\'s Waldo? Picture #1-</title>\r\n      <link rel=\"stylesheet\" href=\"styles.css\">\r\n      <script type=\"text/javascript\" src=\"scripts.js\"></script>\r\n   </head>\r\n\r\n   <body>\r\n      <div class=\"wrapper\">\r\n         <h1>Level 1 - Very Easy</h1>\r\n         <br>\r\n         <div class=\"gameWindow\">\r\n            <img src=\"images/Waldo01-easy.jpg\" class=\"searchImage\" id=\"WaldoLevel1\">\r\n            <h2 id=\"timeLapsed\"></h2>\r\n         </div>\r\n         <p>Find Waldo!</p>\r\n\r\n         <div id=\"modal\" style=\"display: none\"></div>\r\n\r\n         <div id=\"modalContent\" style=\"display: none\">\r\n            <div id=\"modalTimer\"></div>\r\n            <div id=\"modalMessage\">Good job!</div>\r\n            <form action=\"#\" id=\"modalHighScoreButton\">\r\n               <input type=\"submit\" value=\"High Scores\">\r\n            </form>\r\n            <form action=\"pic2.html\" id=\"modalNext\">\r\n               <input type=\"submit\" value=\"Next Puzzle\">\r\n            </form>			  \r\n         </div>\r\n\r\n         <div id=\"modalHighScore\" style=\"display: none\">\r\n            <div id=\"modalHighScoresTitle\"></div>\r\n            <div id=\"actualHighScores\"></div>\r\n            <form action=\"\" id=\"modalHighScoreButton\">\r\n               <input type=\"submit\" value=\"High Scores\">\r\n            </form>\r\n            <form action=\"pic2.html\" id=\"modalNext\">\r\n               <input type=\"submit\" value=\"Next Puzzle\">\r\n            </form>			  	\r\n         </div>\r\n      </div>\r\n   </body>\r\n</html></span></pre>\r\n\r\n<h3>Note: For now, don\'t worry about the naming convention or folder placement of this file, as we will change it later. Just name the file what you\'d like and place it somewhere inside of your project where you will remember it.</h3>\r\n\r\nIn the head tag, we\'re just telling the program what we would like the title of our page to be, and which files we would like connected to this HTML file, the CSS stylesheet, and our Javascript file.\r\n\r\nWithin the body and wrapper divs, we have the label of what level we\'re on, in this case level 1, and the image we would like the player to search. There are hundreds of Where\'s Waldo images we can use, so pick one that you like!\r\n\r\nFinally, our \"modal\" div will contain the structure we need in order to show the window that will pop up after the user has found Waldo. It will contain the amount of time it took for the user to find Waldo, a short message confirming they found Waldo, and two buttons, \"Next Puzzle\", and \"High Scores\". Notice the \"high score\" modal is exactly the same as the modal content block, just with a few different names.\r\n\r\n<h2>Time for Some Cascading Style</h2>\r\n\r\nNow we\'ll take a look at the CSS file, or Cascading Style Sheet. This file allows us to format our HTML elements and make them look nice, and stay where we want them to on the page. Take a look through the file below:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n\r\n.wrapper {\r\n   background-color: rgba(255, 250, 224, 0.7);\r\n   padding-left: 10px;\r\n   padding-right: 10px;\r\n   padding-bottom: 10px;\r\n   margin-top: -3000px;\r\n   margin-bottom: -10px;\r\n   padding-top: 3000px;\r\n   box-shadow: 0px 0px 10px #918952;\r\n   min-height: 100%;\r\n}\r\n\r\nh1 {\r\n   font-family: sans-serif;\r\n   text-align: center;\r\n   color: #4c4c4c;\r\n}\r\n\r\np {\r\n   font-family: sans-serif;\r\n   text-align: justify;\r\n   padding-right: 10px;\r\n   padding-left: 10px;\r\n   color: #4c4c4c;\r\n}\r\n\r\ninput[type=submit] {\r\n   display: block;\r\n   width: 120px;\r\n   height: 60px;\r\n   font-family: sans-serif;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#waldoBasic {\r\n   display: block;\r\n   width: 250px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   border-style: dashed;\r\n   border-width: 2px;\r\n   border-color: black;\r\n}\r\n\r\n.searchImage {\r\n   display: block;\r\n   width: 750px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   box-shadow: 0px 0px 8px black;\r\n}\r\n\r\n#timeLapsed {\r\n   display: none;\r\n}\r\n\r\n#modal{\r\n   background: rgba(0,0,0,0.5);\r\n   position: fixed;\r\n   z-index: 9950;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   top: 0;\r\n   left: 0;\r\n}\r\n\r\n#modalContent {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 120px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalHighScore {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 20px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalMessage {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalHighScoresTitle {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#actualHighScores {\r\n   font-family: sans-serif;\r\n   font-size: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalNext input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   right: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalHighScoreButton input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   left: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #2483e2;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalTimer {\r\n   text-align: center;\r\n   font-family: sans-serif;\r\n   font-weight: bold;\r\n   font-size: 5em;\r\n   line-height: 2em;\r\n   text-shadow: -1px 0 yellow, 0 1px yellow, 1px 0 yellow, 0 -1px yellow;\r\n   -webkit-transform:scale(1,1.5); /* Safari and Chrome */\r\n   -moz-transform:scale(1,1.5); /* Firefox */\r\n   -ms-transform:scale(1,1.5); /* IE 9 */\r\n   -o-transform:scale(1,1.5); /* Opera */\r\n   transform:scale(1,1.5); /* W3C */\r\n}\r\n</span></pre>","Where\'s Waldo? - Part One","","inherit","closed","closed","","41-revision-v1","","","2017-10-25 19:59:25","2017-10-25 19:59:25","",41,"http://evingrost.dev/41-revision-v1/",0,"revision","",0),
(44,1,"2017-10-25 20:00:13","2017-10-25 20:00:13","","WhereWaldoHD","","inherit","open","closed","","wherewaldohd","","","2017-10-25 20:00:13","2017-10-25 20:00:13","",41,"http://evingrost.dev/wp-content/uploads/2017/10/WhereWaldoHD.jpg",0,"attachment","image/jpeg",0),
(45,1,"2017-10-25 20:10:24","2017-10-25 20:10:24","","WhereWaldoSmall","","inherit","open","closed","","wherewaldosmall","","","2017-10-25 20:10:24","2017-10-25 20:10:24","",41,"http://evingrost.dev/wp-content/uploads/2017/10/WhereWaldoSmall.jpg",0,"attachment","image/jpeg",0),
(46,1,"2017-10-25 20:11:23","2017-10-25 20:11:23","Welcome to the Where\'s Waldo coding tutorial, where we\'re going to discuss the basics of creating a Where\'s Waldo game that you can play with your friends and family!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/Waldo-241x300.jpg\" alt=\"Hello Waldo!\" class=\"image--centered\" />\r\n\r\n<h2>Our Basic HTML</h2>\r\n\r\nFor this tutorial, we\'ll start by going over our basic HTML. HTML provides us with the building blocks we need to get started putting our site together. Surprisingly, we don\'t need as much as you may think. Here is all of the HTML we\'ll be working with:\r\n\r\n<pre><span class=\"code__block\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en-us\"&gt;\r\n\r\n   &lt;head&gt;\r\n      &lt;meta charset=\"utf-8\"&gt;\r\n      &lt;title&gt;-Where\'s Waldo? Picture #1-&lt;/title&gt;\r\n      &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\r\n      &lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\r\n   &lt;/head&gt;\r\n\r\n   &lt;body&gt;\r\n      &lt;div class=\"wrapper\"&gt;\r\n         vh1&gt;Level 1 - Very Easy&lt;/h1&gt;\r\n         &lt;br&gt;\r\n         &lt;div class=\"gameWindow\"&gt;\r\n            &lt;img src=\"images/Waldo01-easy.jpg\" class=\"searchImage\" id=\"WaldoLevel1\"&gt;\r\n            &lt;h2 id=\"timeLapsed\"&gt;&lt;/h2&gt;\r\n         &lt;/div&gt;\r\n         &lt;p&gt;Find Waldo!&lt;/p&gt;\r\n\r\n         &lt;div id=\"modal\" style=\"display: none\"&gt;&lt;/div&gt;\r\n\r\n         &lt;div id=\"modalContent\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalTimer\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"modalMessage\"&gt;Good job!&lt;/div&gt;\r\n            &lt;form action=\"#\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  \r\n         &lt;/div&gt;\r\n\r\n         &lt;div id=\"modalHighScore\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalHighScoresTitle\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"actualHighScores\"&gt;&lt;/div&gt;\r\n            &lt;form action=\"\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  	\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</span></pre>\r\n\r\n<h3>Note: For now, don\'t worry about the naming convention or folder placement of this file, as we will change it later. Just name the file what you\'d like and place it somewhere inside of your project where you will remember it.</h3>\r\n\r\nIn the head tag, we\'re just telling the program what we would like the title of our page to be, and which files we would like connected to this HTML file, the CSS stylesheet, and our Javascript file.\r\n\r\nWithin the body and wrapper divs, we have the label of what level we\'re on, in this case level 1, and the image we would like the player to search. There are hundreds of Where\'s Waldo images we can use, so pick one that you like!\r\n\r\nFinally, our \"modal\" div will contain the structure we need in order to show the window that will pop up after the user has found Waldo. It will contain the amount of time it took for the user to find Waldo, a short message confirming they found Waldo, and two buttons, \"Next Puzzle\", and \"High Scores\". Notice the \"high score\" modal is exactly the same as the modal content block, just with a few different names.\r\n\r\n<h2>Time for Some Cascading Style</h2>\r\n\r\nNow we\'ll take a look at the CSS file, or Cascading Style Sheet. This file allows us to format our HTML elements and make them look nice, and stay where we want them to on the page. Take a look through the file below:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n\r\n.wrapper {\r\n   background-color: rgba(255, 250, 224, 0.7);\r\n   padding-left: 10px;\r\n   padding-right: 10px;\r\n   padding-bottom: 10px;\r\n   margin-top: -3000px;\r\n   margin-bottom: -10px;\r\n   padding-top: 3000px;\r\n   box-shadow: 0px 0px 10px #918952;\r\n   min-height: 100%;\r\n}\r\n\r\nh1 {\r\n   font-family: sans-serif;\r\n   text-align: center;\r\n   color: #4c4c4c;\r\n}\r\n\r\np {\r\n   font-family: sans-serif;\r\n   text-align: justify;\r\n   padding-right: 10px;\r\n   padding-left: 10px;\r\n   color: #4c4c4c;\r\n}\r\n\r\ninput[type=submit] {\r\n   display: block;\r\n   width: 120px;\r\n   height: 60px;\r\n   font-family: sans-serif;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#waldoBasic {\r\n   display: block;\r\n   width: 250px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   border-style: dashed;\r\n   border-width: 2px;\r\n   border-color: black;\r\n}\r\n\r\n.searchImage {\r\n   display: block;\r\n   width: 750px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   box-shadow: 0px 0px 8px black;\r\n}\r\n\r\n#timeLapsed {\r\n   display: none;\r\n}\r\n\r\n#modal{\r\n   background: rgba(0,0,0,0.5);\r\n   position: fixed;\r\n   z-index: 9950;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   top: 0;\r\n   left: 0;\r\n}\r\n\r\n#modalContent {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 120px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalHighScore {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 20px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalMessage {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalHighScoresTitle {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#actualHighScores {\r\n   font-family: sans-serif;\r\n   font-size: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalNext input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   right: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalHighScoreButton input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   left: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #2483e2;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalTimer {\r\n   text-align: center;\r\n   font-family: sans-serif;\r\n   font-weight: bold;\r\n   font-size: 5em;\r\n   line-height: 2em;\r\n   text-shadow: -1px 0 yellow, 0 1px yellow, 1px 0 yellow, 0 -1px yellow;\r\n   -webkit-transform:scale(1,1.5); /* Safari and Chrome */\r\n   -moz-transform:scale(1,1.5); /* Firefox */\r\n   -ms-transform:scale(1,1.5); /* IE 9 */\r\n   -o-transform:scale(1,1.5); /* Opera */\r\n   transform:scale(1,1.5); /* W3C */\r\n}</span></pre>\r\n\r\nAt first, this file may look a bit intimidating, but don\'t worry! It\'s very repetitive. Let\'s break it down:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n</span></pre>\r\n\r\nIn CSS, each tag targets an HTML element, and styles that element to the specifications in the CSS. So in this example, the width of the HTML element \"body\" has been set to 800 pixels, the background color has been set to a pale yellow, and the body\'s alignment is centered, using the \"margin-left: auto\" and \"margin-right: auto\" lines. We can apply these principles universally by targeting whatevera element we want (h1, p, a, etc.), and styling the aspects of that tag in the way we want. We can even create custom style-types easily by entering div tags in our HTML file with a custom class name, then targeting that class with our CSS in this format: <span class=\"inline__code\">.class-name { styles }</span>. Feel free to play around with these different tags, options, colors, and styles to create your own unique page!\r\n\r\n<h3>Note: For more information on CSS and some of the styling options available, <a href=\"https://www.w3schools.com/Css/\" target=\"_blank\">check out this tutorial</a>.</h3>","Where\'s Waldo? - Part One","","inherit","closed","closed","","41-revision-v1","","","2017-10-25 20:11:23","2017-10-25 20:11:23","",41,"http://evingrost.dev/41-revision-v1/",0,"revision","",0),
(47,1,"2017-10-25 20:12:17","2017-10-25 20:12:17","Welcome to the Where\'s Waldo coding tutorial, where we\'re going to discuss the basics of creating a Where\'s Waldo game that you can play with your friends and family!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/Waldo-241x300.jpg\" alt=\"Hello Waldo!\" class=\"image__centered--smaller\" />\r\n\r\n<h2>Our Basic HTML</h2>\r\n\r\nFor this tutorial, we\'ll start by going over our basic HTML. HTML provides us with the building blocks we need to get started putting our site together. Surprisingly, we don\'t need as much as you may think. Here is all of the HTML we\'ll be working with:\r\n\r\n<pre><span class=\"code__block\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en-us\"&gt;\r\n\r\n   &lt;head&gt;\r\n      &lt;meta charset=\"utf-8\"&gt;\r\n      &lt;title&gt;-Where\'s Waldo? Picture #1-&lt;/title&gt;\r\n      &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\r\n      &lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\r\n   &lt;/head&gt;\r\n\r\n   &lt;body&gt;\r\n      &lt;div class=\"wrapper\"&gt;\r\n         vh1&gt;Level 1 - Very Easy&lt;/h1&gt;\r\n         &lt;br&gt;\r\n         &lt;div class=\"gameWindow\"&gt;\r\n            &lt;img src=\"images/Waldo01-easy.jpg\" class=\"searchImage\" id=\"WaldoLevel1\"&gt;\r\n            &lt;h2 id=\"timeLapsed\"&gt;&lt;/h2&gt;\r\n         &lt;/div&gt;\r\n         &lt;p&gt;Find Waldo!&lt;/p&gt;\r\n\r\n         &lt;div id=\"modal\" style=\"display: none\"&gt;&lt;/div&gt;\r\n\r\n         &lt;div id=\"modalContent\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalTimer\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"modalMessage\"&gt;Good job!&lt;/div&gt;\r\n            &lt;form action=\"#\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  \r\n         &lt;/div&gt;\r\n\r\n         &lt;div id=\"modalHighScore\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalHighScoresTitle\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"actualHighScores\"&gt;&lt;/div&gt;\r\n            &lt;form action=\"\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  	\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</span></pre>\r\n\r\n<h3>Note: For now, don\'t worry about the naming convention or folder placement of this file, as we will change it later. Just name the file what you\'d like and place it somewhere inside of your project where you will remember it.</h3>\r\n\r\nIn the head tag, we\'re just telling the program what we would like the title of our page to be, and which files we would like connected to this HTML file, the CSS stylesheet, and our Javascript file.\r\n\r\nWithin the body and wrapper divs, we have the label of what level we\'re on, in this case level 1, and the image we would like the player to search. There are hundreds of Where\'s Waldo images we can use, so pick one that you like!\r\n\r\nFinally, our \"modal\" div will contain the structure we need in order to show the window that will pop up after the user has found Waldo. It will contain the amount of time it took for the user to find Waldo, a short message confirming they found Waldo, and two buttons, \"Next Puzzle\", and \"High Scores\". Notice the \"high score\" modal is exactly the same as the modal content block, just with a few different names.\r\n\r\n<h2>Time for Some Cascading Style</h2>\r\n\r\nNow we\'ll take a look at the CSS file, or Cascading Style Sheet. This file allows us to format our HTML elements and make them look nice, and stay where we want them to on the page. Take a look through the file below:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n\r\n.wrapper {\r\n   background-color: rgba(255, 250, 224, 0.7);\r\n   padding-left: 10px;\r\n   padding-right: 10px;\r\n   padding-bottom: 10px;\r\n   margin-top: -3000px;\r\n   margin-bottom: -10px;\r\n   padding-top: 3000px;\r\n   box-shadow: 0px 0px 10px #918952;\r\n   min-height: 100%;\r\n}\r\n\r\nh1 {\r\n   font-family: sans-serif;\r\n   text-align: center;\r\n   color: #4c4c4c;\r\n}\r\n\r\np {\r\n   font-family: sans-serif;\r\n   text-align: justify;\r\n   padding-right: 10px;\r\n   padding-left: 10px;\r\n   color: #4c4c4c;\r\n}\r\n\r\ninput[type=submit] {\r\n   display: block;\r\n   width: 120px;\r\n   height: 60px;\r\n   font-family: sans-serif;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#waldoBasic {\r\n   display: block;\r\n   width: 250px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   border-style: dashed;\r\n   border-width: 2px;\r\n   border-color: black;\r\n}\r\n\r\n.searchImage {\r\n   display: block;\r\n   width: 750px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   box-shadow: 0px 0px 8px black;\r\n}\r\n\r\n#timeLapsed {\r\n   display: none;\r\n}\r\n\r\n#modal{\r\n   background: rgba(0,0,0,0.5);\r\n   position: fixed;\r\n   z-index: 9950;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   top: 0;\r\n   left: 0;\r\n}\r\n\r\n#modalContent {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 120px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalHighScore {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 20px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalMessage {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalHighScoresTitle {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#actualHighScores {\r\n   font-family: sans-serif;\r\n   font-size: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalNext input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   right: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalHighScoreButton input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   left: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #2483e2;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalTimer {\r\n   text-align: center;\r\n   font-family: sans-serif;\r\n   font-weight: bold;\r\n   font-size: 5em;\r\n   line-height: 2em;\r\n   text-shadow: -1px 0 yellow, 0 1px yellow, 1px 0 yellow, 0 -1px yellow;\r\n   -webkit-transform:scale(1,1.5); /* Safari and Chrome */\r\n   -moz-transform:scale(1,1.5); /* Firefox */\r\n   -ms-transform:scale(1,1.5); /* IE 9 */\r\n   -o-transform:scale(1,1.5); /* Opera */\r\n   transform:scale(1,1.5); /* W3C */\r\n}</span></pre>\r\n\r\nAt first, this file may look a bit intimidating, but don\'t worry! It\'s very repetitive. Let\'s break it down:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n</span></pre>\r\n\r\nIn CSS, each tag targets an HTML element, and styles that element to the specifications in the CSS. So in this example, the width of the HTML element \"body\" has been set to 800 pixels, the background color has been set to a pale yellow, and the body\'s alignment is centered, using the \"margin-left: auto\" and \"margin-right: auto\" lines. We can apply these principles universally by targeting whatevera element we want (h1, p, a, etc.), and styling the aspects of that tag in the way we want. We can even create custom style-types easily by entering div tags in our HTML file with a custom class name, then targeting that class with our CSS in this format: <span class=\"inline__code\">.class-name { styles }</span>. Feel free to play around with these different tags, options, colors, and styles to create your own unique page!\r\n\r\n<h3>Note: For more information on CSS and some of the styling options available, <a href=\"https://www.w3schools.com/Css/\" target=\"_blank\">check out this tutorial</a>.</h3>","Where\'s Waldo? - Part One","","inherit","closed","closed","","41-revision-v1","","","2017-10-25 20:12:17","2017-10-25 20:12:17","",41,"http://evingrost.dev/41-revision-v1/",0,"revision","",0),
(48,1,"2017-10-25 20:12:23","2017-10-25 20:12:23","Welcome to the Where\'s Waldo coding tutorial, where we\'re going to discuss the basics of creating a Where\'s Waldo game that you can play with your friends and family!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/Waldo-241x300.jpg\" alt=\"Hello Waldo!\" class=\"l-image__centered--smaller\" />\r\n\r\n<h2>Our Basic HTML</h2>\r\n\r\nFor this tutorial, we\'ll start by going over our basic HTML. HTML provides us with the building blocks we need to get started putting our site together. Surprisingly, we don\'t need as much as you may think. Here is all of the HTML we\'ll be working with:\r\n\r\n<pre><span class=\"code__block\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en-us\"&gt;\r\n\r\n   &lt;head&gt;\r\n      &lt;meta charset=\"utf-8\"&gt;\r\n      &lt;title&gt;-Where\'s Waldo? Picture #1-&lt;/title&gt;\r\n      &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\r\n      &lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\r\n   &lt;/head&gt;\r\n\r\n   &lt;body&gt;\r\n      &lt;div class=\"wrapper\"&gt;\r\n         vh1&gt;Level 1 - Very Easy&lt;/h1&gt;\r\n         &lt;br&gt;\r\n         &lt;div class=\"gameWindow\"&gt;\r\n            &lt;img src=\"images/Waldo01-easy.jpg\" class=\"searchImage\" id=\"WaldoLevel1\"&gt;\r\n            &lt;h2 id=\"timeLapsed\"&gt;&lt;/h2&gt;\r\n         &lt;/div&gt;\r\n         &lt;p&gt;Find Waldo!&lt;/p&gt;\r\n\r\n         &lt;div id=\"modal\" style=\"display: none\"&gt;&lt;/div&gt;\r\n\r\n         &lt;div id=\"modalContent\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalTimer\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"modalMessage\"&gt;Good job!&lt;/div&gt;\r\n            &lt;form action=\"#\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  \r\n         &lt;/div&gt;\r\n\r\n         &lt;div id=\"modalHighScore\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalHighScoresTitle\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"actualHighScores\"&gt;&lt;/div&gt;\r\n            &lt;form action=\"\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  	\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</span></pre>\r\n\r\n<h3>Note: For now, don\'t worry about the naming convention or folder placement of this file, as we will change it later. Just name the file what you\'d like and place it somewhere inside of your project where you will remember it.</h3>\r\n\r\nIn the head tag, we\'re just telling the program what we would like the title of our page to be, and which files we would like connected to this HTML file, the CSS stylesheet, and our Javascript file.\r\n\r\nWithin the body and wrapper divs, we have the label of what level we\'re on, in this case level 1, and the image we would like the player to search. There are hundreds of Where\'s Waldo images we can use, so pick one that you like!\r\n\r\nFinally, our \"modal\" div will contain the structure we need in order to show the window that will pop up after the user has found Waldo. It will contain the amount of time it took for the user to find Waldo, a short message confirming they found Waldo, and two buttons, \"Next Puzzle\", and \"High Scores\". Notice the \"high score\" modal is exactly the same as the modal content block, just with a few different names.\r\n\r\n<h2>Time for Some Cascading Style</h2>\r\n\r\nNow we\'ll take a look at the CSS file, or Cascading Style Sheet. This file allows us to format our HTML elements and make them look nice, and stay where we want them to on the page. Take a look through the file below:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n\r\n.wrapper {\r\n   background-color: rgba(255, 250, 224, 0.7);\r\n   padding-left: 10px;\r\n   padding-right: 10px;\r\n   padding-bottom: 10px;\r\n   margin-top: -3000px;\r\n   margin-bottom: -10px;\r\n   padding-top: 3000px;\r\n   box-shadow: 0px 0px 10px #918952;\r\n   min-height: 100%;\r\n}\r\n\r\nh1 {\r\n   font-family: sans-serif;\r\n   text-align: center;\r\n   color: #4c4c4c;\r\n}\r\n\r\np {\r\n   font-family: sans-serif;\r\n   text-align: justify;\r\n   padding-right: 10px;\r\n   padding-left: 10px;\r\n   color: #4c4c4c;\r\n}\r\n\r\ninput[type=submit] {\r\n   display: block;\r\n   width: 120px;\r\n   height: 60px;\r\n   font-family: sans-serif;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#waldoBasic {\r\n   display: block;\r\n   width: 250px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   border-style: dashed;\r\n   border-width: 2px;\r\n   border-color: black;\r\n}\r\n\r\n.searchImage {\r\n   display: block;\r\n   width: 750px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   box-shadow: 0px 0px 8px black;\r\n}\r\n\r\n#timeLapsed {\r\n   display: none;\r\n}\r\n\r\n#modal{\r\n   background: rgba(0,0,0,0.5);\r\n   position: fixed;\r\n   z-index: 9950;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   top: 0;\r\n   left: 0;\r\n}\r\n\r\n#modalContent {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 120px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalHighScore {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 20px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalMessage {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalHighScoresTitle {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#actualHighScores {\r\n   font-family: sans-serif;\r\n   font-size: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalNext input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   right: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalHighScoreButton input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   left: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #2483e2;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalTimer {\r\n   text-align: center;\r\n   font-family: sans-serif;\r\n   font-weight: bold;\r\n   font-size: 5em;\r\n   line-height: 2em;\r\n   text-shadow: -1px 0 yellow, 0 1px yellow, 1px 0 yellow, 0 -1px yellow;\r\n   -webkit-transform:scale(1,1.5); /* Safari and Chrome */\r\n   -moz-transform:scale(1,1.5); /* Firefox */\r\n   -ms-transform:scale(1,1.5); /* IE 9 */\r\n   -o-transform:scale(1,1.5); /* Opera */\r\n   transform:scale(1,1.5); /* W3C */\r\n}</span></pre>\r\n\r\nAt first, this file may look a bit intimidating, but don\'t worry! It\'s very repetitive. Let\'s break it down:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n</span></pre>\r\n\r\nIn CSS, each tag targets an HTML element, and styles that element to the specifications in the CSS. So in this example, the width of the HTML element \"body\" has been set to 800 pixels, the background color has been set to a pale yellow, and the body\'s alignment is centered, using the \"margin-left: auto\" and \"margin-right: auto\" lines. We can apply these principles universally by targeting whatevera element we want (h1, p, a, etc.), and styling the aspects of that tag in the way we want. We can even create custom style-types easily by entering div tags in our HTML file with a custom class name, then targeting that class with our CSS in this format: <span class=\"inline__code\">.class-name { styles }</span>. Feel free to play around with these different tags, options, colors, and styles to create your own unique page!\r\n\r\n<h3>Note: For more information on CSS and some of the styling options available, <a href=\"https://www.w3schools.com/Css/\" target=\"_blank\">check out this tutorial</a>.</h3>","Where\'s Waldo? - Part One","","inherit","closed","closed","","41-revision-v1","","","2017-10-25 20:12:23","2017-10-25 20:12:23","",41,"http://evingrost.dev/41-revision-v1/",0,"revision","",0),
(49,1,"2017-10-25 20:59:13","2017-10-25 20:59:13","Welcome to the Where\'s Waldo coding tutorial, where we\'re going to discuss the basics of creating a Where\'s Waldo game that you can play with your friends and family!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/Waldo-241x300.jpg\" alt=\"Hello Waldo!\" class=\"l-image__centered--smaller\" />\r\n\r\n<h2>Our Basic HTML</h2>\r\n\r\nFor this tutorial, we\'ll start by going over our basic HTML. HTML provides us with the building blocks we need to get started putting our site together. Surprisingly, we don\'t need as much as you may think. Here is all of the HTML we\'ll be working with:\r\n\r\n<pre><span class=\"code__block\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en-us\"&gt;\r\n\r\n   &lt;head&gt;\r\n      &lt;meta charset=\"utf-8\"&gt;\r\n      &lt;title&gt;-Where\'s Waldo? Picture #1-&lt;/title&gt;\r\n      &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\r\n      &lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\r\n   &lt;/head&gt;\r\n\r\n   &lt;body&gt;\r\n      &lt;div class=\"wrapper\"&gt;\r\n         &lt;h1&gt;Level 1 - Very Easy&lt;/h1&gt;\r\n         &lt;br&gt;\r\n         &lt;div class=\"gameWindow\"&gt;\r\n            &lt;img src=\"images/Waldo01-easy.jpg\" class=\"searchImage\" id=\"WaldoLevel1\"&gt;\r\n            &lt;h2 id=\"timeLapsed\"&gt;&lt;/h2&gt;\r\n         &lt;/div&gt;\r\n         &lt;p&gt;Find Waldo!&lt;/p&gt;\r\n\r\n         &lt;div id=\"modal\" style=\"display: none\"&gt;&lt;/div&gt;\r\n\r\n         &lt;div id=\"modalContent\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalTimer\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"modalMessage\"&gt;Good job!&lt;/div&gt;\r\n            &lt;form action=\"#\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  \r\n         &lt;/div&gt;\r\n\r\n         &lt;div id=\"modalHighScore\" style=\"display: none\"&gt;\r\n            &lt;div id=\"modalHighScoresTitle\"&gt;&lt;/div&gt;\r\n            &lt;div id=\"actualHighScores\"&gt;&lt;/div&gt;\r\n            &lt;form action=\"\" id=\"modalHighScoreButton\"&gt;\r\n               &lt;input type=\"submit\" value=\"High Scores\"&gt;\r\n            &lt;/form&gt;\r\n            &lt;form action=\"pic2.html\" id=\"modalNext\"&gt;\r\n               &lt;input type=\"submit\" value=\"Next Puzzle\"&gt;\r\n            &lt;/form&gt;			  	\r\n         &lt;/div&gt;\r\n      &lt;/div&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</span></pre>\r\n\r\n<h3>Note: For now, don\'t worry about the naming convention or folder placement of this file, as we will change it later. Just name the file what you\'d like and place it somewhere inside of your project where you will remember it.</h3>\r\n\r\nIn the head tag, we\'re just telling the program what we would like the title of our page to be, and which files we would like connected to this HTML file, the CSS stylesheet, and our Javascript file.\r\n\r\nWithin the body and wrapper divs, we have the label of what level we\'re on, in this case level 1, and the image we would like the player to search. There are hundreds of Where\'s Waldo images we can use, so pick one that you like!\r\n\r\nFinally, our \"modal\" div will contain the structure we need in order to show the window that will pop up after the user has found Waldo. It will contain the amount of time it took for the user to find Waldo, a short message confirming they found Waldo, and two buttons, \"Next Puzzle\", and \"High Scores\". Notice the \"high score\" modal is exactly the same as the modal content block, just with a few different names.\r\n\r\n<h2>Time for Some Cascading Style</h2>\r\n\r\nNow we\'ll take a look at the CSS file, or Cascading Style Sheet. This file allows us to format our HTML elements and make them look nice, and stay where we want them to on the page. Take a look through the file below:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n\r\n.wrapper {\r\n   background-color: rgba(255, 250, 224, 0.7);\r\n   padding-left: 10px;\r\n   padding-right: 10px;\r\n   padding-bottom: 10px;\r\n   margin-top: -3000px;\r\n   margin-bottom: -10px;\r\n   padding-top: 3000px;\r\n   box-shadow: 0px 0px 10px #918952;\r\n   min-height: 100%;\r\n}\r\n\r\nh1 {\r\n   font-family: sans-serif;\r\n   text-align: center;\r\n   color: #4c4c4c;\r\n}\r\n\r\np {\r\n   font-family: sans-serif;\r\n   text-align: justify;\r\n   padding-right: 10px;\r\n   padding-left: 10px;\r\n   color: #4c4c4c;\r\n}\r\n\r\ninput[type=submit] {\r\n   display: block;\r\n   width: 120px;\r\n   height: 60px;\r\n   font-family: sans-serif;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#waldoBasic {\r\n   display: block;\r\n   width: 250px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   border-style: dashed;\r\n   border-width: 2px;\r\n   border-color: black;\r\n}\r\n\r\n.searchImage {\r\n   display: block;\r\n   width: 750px;\r\n   margin-left: auto;\r\n   margin-right: auto;\r\n   box-shadow: 0px 0px 8px black;\r\n}\r\n\r\n#timeLapsed {\r\n   display: none;\r\n}\r\n\r\n#modal{\r\n   background: rgba(0,0,0,0.5);\r\n   position: fixed;\r\n   z-index: 9950;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   top: 0;\r\n   left: 0;\r\n}\r\n\r\n#modalContent {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 120px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalHighScore {\r\n   width: 600px;\r\n   height: 350px;\r\n   position: fixed;\r\n   z-index: 9999;\r\n   left: 50%;\r\n   top: 50%;\r\n   margin-left: -350px;\r\n   margin-top: -250px;\r\n   background: rgba(255, 255, 255, 0.8);\r\n   border: 1px solid #ccc;\r\n   padding: 20px 30px 30px 30px;\r\n   box-shadow: 0px 0px 12px black;\r\n}\r\n\r\n#modalMessage {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalHighScoresTitle {\r\n   font-family: sans-serif;\r\n   font-size: 3em;\r\n   line-height: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#actualHighScores {\r\n   font-family: sans-serif;\r\n   font-size: 1.5em;\r\n   text-align: center;\r\n}\r\n\r\n#modalNext input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   right: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #e61934;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalHighScoreButton input[type=submit]{\r\n   display: block;\r\n   position: absolute;\r\n   bottom: 20px;\r\n   left: 20px;\r\n   width: 180px;\r\n   height: 70px;\r\n   font-family: sans-serif;\r\n   font-size: 1.7em;\r\n   text-align: center;\r\n   padding: 10px 10px 10px 10px;\r\n   color: white;\r\n   background-color: #2483e2;\r\n   border: none;\r\n   border-radius: 10px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   text-decoration: none;\r\n}\r\n\r\n#modalTimer {\r\n   text-align: center;\r\n   font-family: sans-serif;\r\n   font-weight: bold;\r\n   font-size: 5em;\r\n   line-height: 2em;\r\n   text-shadow: -1px 0 yellow, 0 1px yellow, 1px 0 yellow, 0 -1px yellow;\r\n   -webkit-transform:scale(1,1.5); /* Safari and Chrome */\r\n   -moz-transform:scale(1,1.5); /* Firefox */\r\n   -ms-transform:scale(1,1.5); /* IE 9 */\r\n   -o-transform:scale(1,1.5); /* Opera */\r\n   transform:scale(1,1.5); /* W3C */\r\n}</span></pre>\r\n\r\nAt first, this file may look a bit intimidating, but don\'t worry! It\'s very repetitive. Let\'s break it down:\r\n\r\n<pre><span class=\"code__block\">body {\r\n   width: 800px;\r\n   margin-right: auto;\r\n   margin-left: auto;\r\n   background-color: rgb(255, 248, 209);\r\n   background-image: url(\"images/WaldoBG.jpg\");\r\n   background-position: center;\r\n   background-size: cover;\r\n   background-repeat: no-repeat;\r\n   height: 100%;\r\n}\r\n</span></pre>\r\n\r\nIn CSS, each tag targets an HTML element, and styles that element to the specifications in the CSS. So in this example, the width of the HTML element \"body\" has been set to 800 pixels, the background color has been set to a pale yellow, and the body\'s alignment is centered, using the \"margin-left: auto\" and \"margin-right: auto\" lines. We can apply these principles universally by targeting whatevera element we want (h1, p, a, etc.), and styling the aspects of that tag in the way we want. We can even create custom style-types easily by entering div tags in our HTML file with a custom class name, then targeting that class with our CSS in this format: <span class=\"inline__code\">.class-name { styles }</span>. Feel free to play around with these different tags, options, colors, and styles to create your own unique page!\r\n\r\n<h3>Note: For more information on CSS and some of the styling options available, <a href=\"https://www.w3schools.com/Css/\" target=\"_blank\">check out this tutorial</a>.</h3>","Where\'s Waldo? - Part One","","inherit","closed","closed","","41-revision-v1","","","2017-10-25 20:59:13","2017-10-25 20:59:13","",41,"http://evingrost.dev/41-revision-v1/",0,"revision","",0),
(50,1,"2017-10-25 21:26:39","2017-10-25 21:26:39","<h2>Taking Action with Javascript</h2>\r\n\r\nJavascript is the language we use to make our websites dynamic and interactive. It\'s quite a bit more complicated than the previous areas of code, so we\'ll take it slow and break it down into bite-size pieces.\r\n\r\n<pre><span class=\"code__block\">window.addEventListener(\'load\', function(){\r\n  \r\n});</span></pre>\r\n\r\nThe first step is to put all of our javascript code into this function. All lines of code from here on will be between these brackets. This line of code executes everything inside of it <strong>after</strong> the page has loaded. This will be important because as soon as the user reaches this page, we will be starting a timer that will measure how long it takes for them to find Waldo. We want the timer to start as soon as the image is loaded, not before, so it is important that we keep everything inside this function.\r\n\r\nNow we need to make a plan of goals that we want to accomplish with our javascript. What is it that we need to do in order to make our game work correctly? I find it helpful to make a list of all the things I need to do:\r\n\r\n<ul>\r\n 	<li>We will need to set up a server containing the range of x- and y-coordinates that will register as correct if the user clicks within that range. This will need to be set up in Ruby, so we will do this after we finish the javascript.</li>\r\n 	<li>Start a timer on loading the page.</li>\r\n 	<li>When the user clicks on the image, find the x- and y-coordinates of where they clicked.</li>\r\n 	<li>Send the x- and y-coordinates to the server and let it decide whether they are within the correct range.</li>\r\n 	<li>Trigger the modal to become visible when the user finds Waldo.</li>\r\n 	<li>End the timer when the user finds Waldo.</li>\r\n 	<li>Convert the amount of time passed into a readable format so the user can see how much time it took to find Waldo.</li>\r\n 	<li>Fill the modal with the user\'s time.</li>\r\n</ul>\r\n\r\nLet\'s start with something easy: starting the timer. In order to start the timer, all we need is one line:\r\n\r\n<pre><span class=\"code__block\">var startTimer = Date.now();</span></pre>\r\n\r\nThis line will give us the number of milliseconds that have passed since 1/1/1970. How does that help us? Well, when the user finds Waldo and clicks on him, we\'ll mark the number of milliseconds that have passed again, and subtract the original amount. This will give us the number of milliseconds that have passed since the timer started, which is all we need to know!\r\n\r\nNow let\'s get the x- and y-coordinates of where the user clicked:\r\n\r\n<pre><span class=\"code__block\">function getXY(e){\r\n   var xPosition = e.offsetX;\r\n   var yPosition = e.offsetY;\r\n}\r\n\r\nvar picClick = document.getElementById(\"WaldoLevel1\");\r\npicClick.addEventListener(\'click\', getXY);</span></pre>\r\n\r\nNow is a good time to discuss event listeners. Whenever a user does anything, from clicking, to holding down the arrow keys, even moving the mouse, is an event. Therefore, we need to add what are called Event Listeners. Think of these as little ears that are listening for a specific event. They do nothing until the event happens, and when the event happens, they will perform a particular action.\r\n\r\nLines 5 and 6 above set up an event listener for when the user clicks on the image. When they do, the program will run the \"getXY\" function, giving us the x- and y-coordinates of where they clicked.\r\n\r\nNote that we use \"e\" here as a representative for the \"event\". In this snippet of code, \"e.offsetX\" is a pre-programmed variable within JavaScript that represents the x-coordinate of the element the user clicked on. This is important, because we don\'t want the x-coordinate of where they clicked on the screen, but rather where they clicked on the image.\r\n\r\nFor now, we\'ll leave the server-side programming on pause, so let\'s jump ahead a few steps. Let\'s pretend we\'ve sent the x- and y-coordinates to the server, and the server has come back with a \"correct answer\" response. We can set up our functions for when that happens.\r\n\r\n<pre><span class=\"code__block\">function endTimer(){\r\n   var endingTime = Date.now();\r\n   var totalTime = endingTime - startTimer;\r\n}</span></pre>\r\n\r\nWhen the server responds that the user has the correct answer, the first thing we need to do is stop the timer. This function gives us a variable that contains the total number of milliseconds it took the player to find Waldo. This doesn\'t mean much to our user, however, so now we need to make it readable. This will be our longest piece of javascript code yet, but it\'ll all make sense when we break it down:\r\n\r\n<pre><span class=\"code__block\">function convertToReadableTime(millis){\r\n   var timeArray = [];\r\n\r\n   var hundredths = findHundredths(millis);\r\n\r\n   var x = Math.floor(millis / 1000);\r\n   var seconds = Math.floor(x % 60);\r\n   x /= 60;\r\n   var minutes = Math.floor(x % 60);\r\n   x /= 60;\r\n   var hours = Math.floor(x % 24);\r\n   x /= 24;\r\n   var days = Math.floor(x);\r\n\r\n   timeArray.push(hundredths, seconds, minutes, hours, days);\r\n\r\n   var timeString = timeFormat(timeArray, 2);\r\n   return timeString;\r\n}\r\n\r\nfunction findHundredths(millis){\r\n   var secondsDecimal = millis / 1000;\r\n   var x = String(secondsDecimal);\r\n   var splitHundredths = x.split(\".\");\r\n   var bajillionHundredths = splitHundredths[1];\r\n   var newHundredths = bajillionHundredths.charAt(0) + bajillionHundredths.charAt(1);\r\n   return newHundredths;\r\n}\r\n\r\nfunction timeFormat(array, targetLength){\r\n\r\n   var formattedArray = [];\r\n\r\n   for(var i = 0; i < array.length; i++){\r\n      var output = array[i] + \'\';\r\n\r\n      while (output.length < targetLength) {\r\n         output = \'0\' + output;\r\n      }\r\n\r\n      formattedArray.push(output);\r\n   }\r\n   var finalTimeString = stringItTogether(formattedArray);\r\n   return finalTimeString;\r\n}\r\n\r\nfunction stringItTogether(arrayOfTimes){\r\n   var stringy = arrayOfTimes[4] + \":\" + arrayOfTimes[3] + \":\" + arrayOfTimes[2] + \":\" + arrayOfTimes[1] + \".\" + arrayOfTimes[0]\r\n   return stringy;\r\n}</span></pre>\r\n\r\nLet\'s start with the first function. This function takes in our milliseconds, here called \"millis\", and will break them down into the number of seconds, minutes, hours, and days. Finding hundredths of a second is a little more complicated, so we need another function for that. We\'re setting our variable \"x\" equal to our total milliseconds divided by 1000. To find the number of seconds, we use Math.floor, which will round down to the nearest whole number, instead of getting back something like 14.333333356498275492. We would just want the \"14\" out of that number.\r\n\r\nWe also use the \"%\" here instead of \"/\". This is called the modulo symbol, and this symbol gives us the remainder, instead of the division. For example, \"5/2\" will give us 2.5, whereas \"5%2\" will give us 1, because 1 is the remainder.\r\n\r\nWe then divide x by 60, and find the minutes by getting the remainder of \"x % 60\". We continue like this to get our hours and days. Now let\'s talk about the hundredths function.\r\n\r\nIn order to find the hundreths of a second that are on the timer, we have to do a little more math. We\'ll do this in the findHundredths function. After dividing the milliseconds by 1000, the decimal point is in the correct spot, i.e. \"30.456\". All we need to do is convert this to a string, then split that string by the decimal point. This will give us an array of [\"30\", \"456\"]. We need the first two numbers from the second string (this is the charAt line of code), and now we have the hundredth of a second!\r\n\r\nFinally, we push our hundredths, seconds, minutes, hours, and days into an array. Here\'s where we call our \"timeFormat\" function. Notice that the numbers we currently have are the lowest number of digits possible. As humans, we like to read time in double digits. 4 hours are typically read as \"04 hours\", like on a digital clock. This function will convert all of our numbers into double digits.\r\n\r\n<h4>Example: 3 minutes, 6 seconds, and 45 hundredths of a second would come in to the function as [45, 6, 3, 0, 0], and becomes [\"45\", \"06\", \"03\", \"00\", \"00\"] after the function has executed.</h4>\r\n\r\nNow, when we call the \"stringItTogether\" function, it will use the numbers in the array to a string that is readable to our user!\r\n\r\n<h4>Another example: 0 days, 4 hours, 37 minutes, 2 seconds, and 56 hundredths of a second will come out as \"00:04:37:02.56\".</h4>\r\n\r\nNow that we have our timer string, we can use it to fill in our modal!\r\n\r\n<pre><span class=\"code__block\">function fillModal(timerString){\r\n   var modalTimerText = document.getElementById(\"modalTimer\");\r\n   modalTimerText.innerHTML = timerString;\r\n   displayModal();\r\n}</span></pre>\r\n\r\nIf you take a quick look back in our HTML, we set ourselves up for success by creating that modal content block. Within that tag, we also have a \"modalTimer\" tag, which we can use to input our timer string, and our modal will do all the heavy lifting for us. So, all we need to do is target that tag, as we do in line 2, then fill the innerHTML with that high score string. Our CSS will style the font, size, color, etc. the way we want, and we can move on to displaying the modal.\r\n\r\n<pre><span class=\"code__block\">function displayModal(){\r\n   var modal = document.getElementById(\"modal\");\r\n   var modalContent = document.getElementById(\"modalContent\");\r\n   var modalHighScores = document.getElementById(\"modalHighScores\");\r\n   modal.style.display = \"block\";\r\n   modalContent.style.display = \"block\";\r\n}</span></pre>\r\n\r\nWhen we look back in our HTML again, we\'ll see that the display of the modal blocks have been set to \"none\" as default. All we need to do to make our modal \"appear\", is to set the display to \"block\". This will place our modal over top of our page, (Note the style \"z-index\" in the CSS style sheet, which indicates the order from front to back of each tag.), and make it visible for the user to interact with.\r\n\r\nNow let\'s have some fun with server-side code!","Where\'s Waldo? - Part Two","","publish","open","open","","wheres-waldo-part-two","","","2017-10-26 01:09:11","2017-10-26 01:09:11","",0,"http://evingrost.dev/?p=50",0,"post","",0),
(51,1,"2017-10-25 21:26:24","2017-10-25 21:26:24","","WhereWaldo02HD","","inherit","open","closed","","wherewaldo02hd","","","2017-10-25 21:26:24","2017-10-25 21:26:24","",50,"http://evingrost.dev/wp-content/uploads/2017/10/WhereWaldo02HD.jpg",0,"attachment","image/jpeg",0),
(52,1,"2017-10-25 21:26:25","2017-10-25 21:26:25","","WhereWaldo02Small","","inherit","open","closed","","wherewaldo02small","","","2017-10-25 21:26:25","2017-10-25 21:26:25","",50,"http://evingrost.dev/wp-content/uploads/2017/10/WhereWaldo02Small.jpg",0,"attachment","image/jpeg",0),
(53,1,"2017-10-25 21:26:39","2017-10-25 21:26:39","<h2>Taking Action with Javascript</h2>\r\n\r\nJavascript is the language we use to make our websites dynamic and interactive. It\'s quite a bit more complicated than the previous areas of code, so we\'ll take it slow and break it down into bite-size pieces.\r\n\r\n<pre><span class=\"code__block\">window.addEventListener(\'load\', function(){\r\n  \r\n});</span></pre>\r\n\r\nThe first step is to put all of our javascript code into this function. All lines of code from here on will be between these brackets. This line of code executes everything inside of it <strong>after</strong> the page has loaded. This will be important because as soon as the user reaches this page, we will be starting a timer that will measure how long it takes for them to find Waldo. We want the timer to start as soon as the image is loaded, not before, so it is important that we keep everything inside this function.\r\n\r\nNow we need to make a plan of goals that we want to accomplish with our javascript. What is it that we need to do in order to make our game work correctly? I find it helpful to make a list of all the things I need to do:\r\n\r\n<ul>\r\n 	<li>We will need to set up a server containing the range of x- and y-coordinates that will register as correct if the user clicks within that range. This will need to be set up in Ruby, so we will do this after we finish the javascript.</li>\r\n 	<li>Start a timer on loading the page.</li>\r\n 	<li>When the user clicks on the image, find the x- and y-coordinates of where they clicked.</li>\r\n 	<li>Send the x- and y-coordinates to the server and let it decide whether they are within the correct range.</li>\r\n 	<li>Trigger the modal to become visible when the user finds Waldo.</li>\r\n 	<li>End the timer when the user finds Waldo.</li>\r\n 	<li>Convert the amount of time passed into a readable format so the user can see how much time it took to find Waldo.</li>\r\n 	<li>Fill the modal with the user\'s time.</li>\r\n</ul>\r\n\r\nLet\'s start with something easy: starting the timer. In order to start the timer, all we need is one line:\r\n<pre><span class=\"code__block\">var startTimer = Date.now();</span></pre>","Where\'s Waldo? - Part Two","","inherit","closed","closed","","50-revision-v1","","","2017-10-25 21:26:39","2017-10-25 21:26:39","",50,"http://evingrost.dev/50-revision-v1/",0,"revision","",0),
(54,1,"2017-10-25 21:32:41","2017-10-25 21:32:41","<h2>Taking Action with Javascript</h2>\n\nJavascript is the language we use to make our websites dynamic and interactive. It\'s quite a bit more complicated than the previous areas of code, so we\'ll take it slow and break it down into bite-size pieces.\n\n<pre><span class=\"code__block\">window.addEventListener(\'load\', function(){\n  \n});</span></pre>\n\nThe first step is to put all of our javascript code into this function. All lines of code from here on will be between these brackets. This line of code executes everything inside of it <strong>after</strong> the page has loaded. This will be important because as soon as the user reaches this page, we will be starting a timer that will measure how long it takes for them to find Waldo. We want the timer to start as soon as the image is loaded, not before, so it is important that we keep everything inside this function.\n\nNow we need to make a plan of goals that we want to accomplish with our javascript. What is it that we need to do in order to make our game work correctly? I find it helpful to make a list of all the things I need to do:\n\n<ul>\n 	<li>We will need to set up a server containing the range of x- and y-coordinates that will register as correct if the user clicks within that range. This will need to be set up in Ruby, so we will do this after we finish the javascript.</li>\n 	<li>Start a timer on loading the page.</li>\n 	<li>When the user clicks on the image, find the x- and y-coordinates of where they clicked.</li>\n 	<li>Send the x- and y-coordinates to the server and let it decide whether they are within the correct range.</li>\n 	<li>Trigger the modal to become visible when the user finds Waldo.</li>\n 	<li>End the timer when the user finds Waldo.</li>\n 	<li>Convert the amount of time passed into a readable format so the user can see how much time it took to find Waldo.</li>\n 	<li>Fill the modal with the user\'s time.</li>\n</ul>\n\nLet\'s start with something easy: starting the timer. In order to start the timer, all we need is one line:\n\n<pre><span class=\"code__block\">var startTimer = Date.now();</span></pre>\n\nThis line will give us the number of milliseconds that have passed since 1/1/1970. How does that help us? Well, when the user finds Waldo and clicks on him, we\'ll mark the number of milliseconds that have passed again, and subtract the original amount. This will give us the number of milliseconds that have passed since the timer started, which is all we need to know!\n\nNow let\'s get the x- and y-coordinates of where the user clicked:\n\n<pre><span class=\"code__block\">function getXY(e){\n   var xPosition = e.offsetX;\n   var yPosition = e.offsetY;\n}\n\nvar picClick = document.getElementById(\"WaldoLevel1\");\npicClick.addEventListener(\'click\', getXY);</span></pre>\n\nNow is a good time to discuss event listeners. Whenever a user does anything, from clicking, to holding down the arrow keys, even moving the mouse, is an event. Therefore, we need to add what are called Event Listeners. Think of these as little ears that are listening for a specific event. They do nothing until the event happens, and when the event happens, they will perform a particular action.\n\nLines 5 and 6 above set up an event listener for when the user clicks on the image. When they do, the program will run the \"getXY\" function, giving us the x- and y-coordinates of where they clicked.\n\nNote that we use \"e\" here as a representative for the \"event\". In this snippet of code, \"e.offsetX\" is a pre-programmed variable within JavaScript that represents the x-coordinate of the element the user clicked on. This is important, because we don\'t want the x-coordinate of where they clicked on the screen, but rather where they clicked on the image.\n\nFor now, we\'ll leave the server-side programming on pause, so let\'s jump ahead a few steps. Let\'s pretend we\'ve sent the x- and y-coordinates to the server, and the server has come back with a \"correct answer\" response. We can set up our functions for when that happens.\n\n<pre><span class=\"code__block\">function endTimer(){\n   var endingTime = Date.now();\n   var totalTime = endingTime - startTimer;\n}</span></pre>\n\nWhen the server responds that the user has the correct answer, the first thing we need to do is stop the timer. This function gives us a variable that contains the total number of milliseconds it took the player to find Waldo. This doesn\'t mean much to our user, however, so now we need to make it readable. This will be our longest piece of javascript code yet, but it\'ll all make sense when we break it down:\n\n<pre><span class=\"code__block\">function convertToReadableTime(millis){\n   var timeArray = [];\n\n   var hundredths = findHundredths(millis);\n\n   var x = Math.floor(millis / 1000);\n   var seconds = Math.floor(x % 60);\n   x /= 60;\n   var minutes = Math.floor(x % 60);\n   x /= 60;\n   var hours = Math.floor(x % 24);\n   x /= 24;\n   var days = Math.floor(x);\n\n   timeArray.push(hundredths, seconds, minutes, hours, days);\n\n   var timeString = timeFormat(timeArray, 2);\n   return timeString;\n}\n\nfunction findHundredths(millis){\n   var secondsDecimal = millis / 1000;\n   var x = String(secondsDecimal);\n   var splitHundredths = x.split(\".\");\n   var bajillionHundredths = splitHundredths[1];\n   var newHundredths = bajillionHundredths.charAt(0) + bajillionHundredths.charAt(1);\n   return newHundredths;\n}\n\nfunction timeFormat(array, targetLength){\n\n   var formattedArray = [];\n\n   for(var i = 0; i < array.length; i++){\n      var output = array[i] + \'\';\n\n      while (output.length < targetLength) {\n         output = \'0\' + output;\n      }\n\n      formattedArray.push(output);\n   }\n   var finalTimeString = stringItTogether(formattedArray);\n   return finalTimeString;\n}\n\nfunction stringItTogether(arrayOfTimes){\n   var stringy = arrayOfTimes[4] + \":\" + arrayOfTimes[3] + \":\" + arrayOfTimes[2] + \":\" + arrayOfTimes[1] + \".\" + arrayOfTimes[0]\n   return stringy;\n}</span></pre>\n\nLet\'s start with the first function. This function takes in our milliseconds, here called \"millis\", and will break them down into the number of seconds, minutes, hours, and days. Finding hundredths of a second is a little more complicated, so we need another function for that. We\'re setting our variable \"x\" equal to our total milliseconds divided by 1000. To find the number of seconds, we use Math.floor, which will round down to the nearest whole number, instead of getting back something like 14.333333356498275492. We would just want the \"14\" out of that number.\n\nWe also use the \"%\" here instead of \"/\". This is called the modulo symbol, and this symbol gives us the remainder, instead of the division. For example, \"5/2\" will give us 2.5, whereas \"5%2\" will give us 1, because 1 is the remainder.\n\nWe then divide x by 60, and find the minutes by getting the remainder of \"x % 60\". We continue like this to get our hours and days. Now let\'s talk about the hundredths function.\n\nIn order to find the hundreths of a second that are on the timer, we have to do a little more math. We\'ll do this in the findHundredths function. After dividing the milliseconds by 1000, the decimal point is in the correct spot, i.e. \"30.456\". All we need to do is convert this to a string, then split that string by the decimal point. This will give us an array of [\"30\", \"456\"]. We need the first two numbers from the second string (this is the charAt line of code), and now we have the hundredth of a second!\n\nFinally, we push our hundredths, seconds, minutes, hours, and days into an array. Here\'s where we call our \"timeFormat\" function. Notice that the numbers we currently have are the lowest number of digits possible. As humans, we like to read time in double digits. 4 hours are typically read as \"04 hours\", like on a digital clock. This function will convert all of our numbers into double digits.\n\n<h4>Example: 3 minutes, 6 seconds, and 45 hundredths of a second would come in to the function as [45, 6, 3, 0, 0], and becomes [\"45\", \"06\", \"03\", \"00\", \"00\"] after the function has executed.</h4>\n\nNow, when we call the \"stringItTogether\" function, it will use the numbers in the array to a string that is readable to our user!\n\n<h4>Another example: 0 days, 4 hours, 37 minutes, 2 seconds, and 56 hundredths of a second will come out as \"00:04:37:02.56\".</h4>\n\nNow that we have our timer string, we can use it to fill in our modal!\n\n","Where\'s Waldo? - Part Two","","inherit","closed","closed","","50-autosave-v1","","","2017-10-25 21:32:41","2017-10-25 21:32:41","",50,"http://evingrost.dev/50-autosave-v1/",0,"revision","",0),
(55,1,"2017-10-25 21:34:10","2017-10-25 21:34:10","<h2>Taking Action with Javascript</h2>\r\n\r\nJavascript is the language we use to make our websites dynamic and interactive. It\'s quite a bit more complicated than the previous areas of code, so we\'ll take it slow and break it down into bite-size pieces.\r\n\r\n<pre><span class=\"code__block\">window.addEventListener(\'load\', function(){\r\n  \r\n});</span></pre>\r\n\r\nThe first step is to put all of our javascript code into this function. All lines of code from here on will be between these brackets. This line of code executes everything inside of it <strong>after</strong> the page has loaded. This will be important because as soon as the user reaches this page, we will be starting a timer that will measure how long it takes for them to find Waldo. We want the timer to start as soon as the image is loaded, not before, so it is important that we keep everything inside this function.\r\n\r\nNow we need to make a plan of goals that we want to accomplish with our javascript. What is it that we need to do in order to make our game work correctly? I find it helpful to make a list of all the things I need to do:\r\n\r\n<ul>\r\n 	<li>We will need to set up a server containing the range of x- and y-coordinates that will register as correct if the user clicks within that range. This will need to be set up in Ruby, so we will do this after we finish the javascript.</li>\r\n 	<li>Start a timer on loading the page.</li>\r\n 	<li>When the user clicks on the image, find the x- and y-coordinates of where they clicked.</li>\r\n 	<li>Send the x- and y-coordinates to the server and let it decide whether they are within the correct range.</li>\r\n 	<li>Trigger the modal to become visible when the user finds Waldo.</li>\r\n 	<li>End the timer when the user finds Waldo.</li>\r\n 	<li>Convert the amount of time passed into a readable format so the user can see how much time it took to find Waldo.</li>\r\n 	<li>Fill the modal with the user\'s time.</li>\r\n</ul>\r\n\r\nLet\'s start with something easy: starting the timer. In order to start the timer, all we need is one line:\r\n\r\n<pre><span class=\"code__block\">var startTimer = Date.now();</span></pre>\r\n\r\nThis line will give us the number of milliseconds that have passed since 1/1/1970. How does that help us? Well, when the user finds Waldo and clicks on him, we\'ll mark the number of milliseconds that have passed again, and subtract the original amount. This will give us the number of milliseconds that have passed since the timer started, which is all we need to know!\r\n\r\nNow let\'s get the x- and y-coordinates of where the user clicked:\r\n\r\n<pre><span class=\"code__block\">function getXY(e){\r\n   var xPosition = e.offsetX;\r\n   var yPosition = e.offsetY;\r\n}\r\n\r\nvar picClick = document.getElementById(\"WaldoLevel1\");\r\npicClick.addEventListener(\'click\', getXY);</span></pre>\r\n\r\nNow is a good time to discuss event listeners. Whenever a user does anything, from clicking, to holding down the arrow keys, even moving the mouse, is an event. Therefore, we need to add what are called Event Listeners. Think of these as little ears that are listening for a specific event. They do nothing until the event happens, and when the event happens, they will perform a particular action.\r\n\r\nLines 5 and 6 above set up an event listener for when the user clicks on the image. When they do, the program will run the \"getXY\" function, giving us the x- and y-coordinates of where they clicked.\r\n\r\nNote that we use \"e\" here as a representative for the \"event\". In this snippet of code, \"e.offsetX\" is a pre-programmed variable within JavaScript that represents the x-coordinate of the element the user clicked on. This is important, because we don\'t want the x-coordinate of where they clicked on the screen, but rather where they clicked on the image.\r\n\r\nFor now, we\'ll leave the server-side programming on pause, so let\'s jump ahead a few steps. Let\'s pretend we\'ve sent the x- and y-coordinates to the server, and the server has come back with a \"correct answer\" response. We can set up our functions for when that happens.\r\n\r\n<pre><span class=\"code__block\">function endTimer(){\r\n   var endingTime = Date.now();\r\n   var totalTime = endingTime - startTimer;\r\n}</span></pre>\r\n\r\nWhen the server responds that the user has the correct answer, the first thing we need to do is stop the timer. This function gives us a variable that contains the total number of milliseconds it took the player to find Waldo. This doesn\'t mean much to our user, however, so now we need to make it readable. This will be our longest piece of javascript code yet, but it\'ll all make sense when we break it down:\r\n\r\n<pre><span class=\"code__block\">function convertToReadableTime(millis){\r\n   var timeArray = [];\r\n\r\n   var hundredths = findHundredths(millis);\r\n\r\n   var x = Math.floor(millis / 1000);\r\n   var seconds = Math.floor(x % 60);\r\n   x /= 60;\r\n   var minutes = Math.floor(x % 60);\r\n   x /= 60;\r\n   var hours = Math.floor(x % 24);\r\n   x /= 24;\r\n   var days = Math.floor(x);\r\n\r\n   timeArray.push(hundredths, seconds, minutes, hours, days);\r\n\r\n   var timeString = timeFormat(timeArray, 2);\r\n   return timeString;\r\n}\r\n\r\nfunction findHundredths(millis){\r\n   var secondsDecimal = millis / 1000;\r\n   var x = String(secondsDecimal);\r\n   var splitHundredths = x.split(\".\");\r\n   var bajillionHundredths = splitHundredths[1];\r\n   var newHundredths = bajillionHundredths.charAt(0) + bajillionHundredths.charAt(1);\r\n   return newHundredths;\r\n}\r\n\r\nfunction timeFormat(array, targetLength){\r\n\r\n   var formattedArray = [];\r\n\r\n   for(var i = 0; i < array.length; i++){\r\n      var output = array[i] + \'\';\r\n\r\n      while (output.length < targetLength) {\r\n         output = \'0\' + output;\r\n      }\r\n\r\n      formattedArray.push(output);\r\n   }\r\n   var finalTimeString = stringItTogether(formattedArray);\r\n   return finalTimeString;\r\n}\r\n\r\nfunction stringItTogether(arrayOfTimes){\r\n   var stringy = arrayOfTimes[4] + \":\" + arrayOfTimes[3] + \":\" + arrayOfTimes[2] + \":\" + arrayOfTimes[1] + \".\" + arrayOfTimes[0]\r\n   return stringy;\r\n}</span></pre>\r\n\r\nLet\'s start with the first function. This function takes in our milliseconds, here called \"millis\", and will break them down into the number of seconds, minutes, hours, and days. Finding hundredths of a second is a little more complicated, so we need another function for that. We\'re setting our variable \"x\" equal to our total milliseconds divided by 1000. To find the number of seconds, we use Math.floor, which will round down to the nearest whole number, instead of getting back something like 14.333333356498275492. We would just want the \"14\" out of that number.\r\n\r\nWe also use the \"%\" here instead of \"/\". This is called the modulo symbol, and this symbol gives us the remainder, instead of the division. For example, \"5/2\" will give us 2.5, whereas \"5%2\" will give us 1, because 1 is the remainder.\r\n\r\nWe then divide x by 60, and find the minutes by getting the remainder of \"x % 60\". We continue like this to get our hours and days. Now let\'s talk about the hundredths function.\r\n\r\nIn order to find the hundreths of a second that are on the timer, we have to do a little more math. We\'ll do this in the findHundredths function. After dividing the milliseconds by 1000, the decimal point is in the correct spot, i.e. \"30.456\". All we need to do is convert this to a string, then split that string by the decimal point. This will give us an array of [\"30\", \"456\"]. We need the first two numbers from the second string (this is the charAt line of code), and now we have the hundredth of a second!\r\n\r\nFinally, we push our hundredths, seconds, minutes, hours, and days into an array. Here\'s where we call our \"timeFormat\" function. Notice that the numbers we currently have are the lowest number of digits possible. As humans, we like to read time in double digits. 4 hours are typically read as \"04 hours\", like on a digital clock. This function will convert all of our numbers into double digits.\r\n\r\n<h4>Example: 3 minutes, 6 seconds, and 45 hundredths of a second would come in to the function as [45, 6, 3, 0, 0], and becomes [\"45\", \"06\", \"03\", \"00\", \"00\"] after the function has executed.</h4>\r\n\r\nNow, when we call the \"stringItTogether\" function, it will use the numbers in the array to a string that is readable to our user!\r\n\r\n<h4>Another example: 0 days, 4 hours, 37 minutes, 2 seconds, and 56 hundredths of a second will come out as \"00:04:37:02.56\".</h4>\r\n\r\nNow that we have our timer string, we can use it to fill in our modal!\r\n\r\n<pre><span class=\"code__block\">function fillModal(timerString){\r\n   var modalTimerText = document.getElementById(\"modalTimer\");\r\n   modalTimerText.innerHTML = timerString;\r\n   displayModal();\r\n}</span></pre>\r\n\r\nIf you take a quick look back in our HTML, we set ourselves up for success by creating that modal content block. Within that tag, we also have a \"modalTimer\" tag, which we can use to input our timer string, and our modal will do all the heavy lifting for us. So, all we need to do is target that tag, as we do in line 2, then fill the innerHTML with that high score string. Our CSS will style the font, size, color, etc. the way we want, and we can move on to displaying the modal.\r\n\r\n<pre><span class=\"code__block\">function displayModal(){\r\n   var modal = document.getElementById(\"modal\");\r\n   var modalContent = document.getElementById(\"modalContent\");\r\n   var modalHighScores = document.getElementById(\"modalHighScores\");\r\n   modal.style.display = \"block\";\r\n   modalContent.style.display = \"block\";\r\n}</span></pre>\r\n\r\nWhen we look back in our HTML again, we\'ll see that the display of the modal blocks have been set to \"none\" as default. All we need to do to make our modal \"appear\", is to set the display to \"block\". This will place our modal over top of our page, (Note the style \"z-index\" in the CSS style sheet, which indicates the order from front to back of each tag.), and make it visible for the user to interact with.\r\n\r\nNow let\'s have some fun with server-side code!","Where\'s Waldo? - Part Two","","inherit","closed","closed","","50-revision-v1","","","2017-10-25 21:34:10","2017-10-25 21:34:10","",50,"http://evingrost.dev/50-revision-v1/",0,"revision","",0),
(56,1,"2017-10-25 23:59:01","2017-10-25 23:59:01","For this section of the tutorial, we will be building our server with a Ruby gem called \"Sinatra\". Sinatra is a fantastic gem that allows us to get up and running quickly and easily with a local host server. This will be the back-end powerhouse that does all of the heavy lifting for our Where\'s Waldo game. While servers can certainly be intimidating for new developers (and experienced coders as well!), Sinatra makes this step very user friendly.\r\n\r\nI\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer at this point in the tutorial. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\n<h2>Creating a Gem of a Server</h2>\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png\" alt=\"Waldo Game Screenshot\" class=\"l-image__centered--large\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","publish","open","open","","wheres-waldo-part-three","","","2017-10-26 13:31:17","2017-10-26 13:31:17","",0,"http://evingrost.dev/?p=56",0,"post","",0),
(57,1,"2017-10-25 23:53:46","2017-10-25 23:53:46","","WhereWaldo03HD","","inherit","open","closed","","wherewaldo03hd","","","2017-10-25 23:53:46","2017-10-25 23:53:46","",56,"http://evingrost.dev/wp-content/uploads/2017/10/WhereWaldo03HD.jpg",0,"attachment","image/jpeg",0),
(58,1,"2017-10-25 23:53:46","2017-10-25 23:53:46","","WhereWaldo03Small","","inherit","open","closed","","wherewaldo03small","","","2017-10-25 23:53:46","2017-10-25 23:53:46","",56,"http://evingrost.dev/wp-content/uploads/2017/10/WhereWaldo03Small.jpg",0,"attachment","image/jpeg",0),
(59,1,"2017-10-25 23:59:01","2017-10-25 23:59:01","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">   Waldo\r\n      public\r\n         images\r\n      views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-25 23:59:01","2017-10-25 23:59:01","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(60,1,"2017-10-26 13:30:19","2017-10-26 13:30:19","For this section of the tutorial, we will be building our server with a Ruby gem called \"Sinatra\". Sinatra is a fantastic gem that allows us to get up and running quickly and easily with a local host server. This will be the back-end powerhouse that does all of the heavy lifting for our Where\'s Waldo game. While servers can certainly \n\nI\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer at this point in the tutorial. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\n\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\n\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\n\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\n\n<h2>Creating a Gem of a Server</h2>\n\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\n\n<pre><span class=\"code__block\">require \'sinatra\'\nrequire \'pry\'\nrequire \'CSV\'\nrequire_relative \'csvMaker.rb\'\n\nget(\"/\"){\n   erb :index\n}</span></pre>\n\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\n\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\n\n<h2>Testing, Testing</h2>\n\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\n\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png\" alt=\"Ruby Terminal Screenshot\" />\n\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\n\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\n\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png\" alt=\"Waldo Game Screenshot\" class=\"l-image__centered--large\" />\n\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\n\n<ul>\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\n</ul>\n\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-autosave-v1","","","2017-10-26 13:30:19","2017-10-26 13:30:19","",56,"http://evingrost.dev/56-autosave-v1/",0,"revision","",0),
(61,1,"2017-10-26 00:08:54","2017-10-26 00:08:54","","RubySS","","inherit","open","closed","","rubyss","","","2017-10-26 00:08:54","2017-10-26 00:08:54","",56,"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png",0,"attachment","image/png",0),
(62,1,"2017-10-26 00:10:09","2017-10-26 00:10:09","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      Waldo\r\n            public\r\n                  images\r\n            views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" class=\"l-image__centered--medium\" />","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:10:09","2017-10-26 00:10:09","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(64,1,"2017-10-26 00:15:35","2017-10-26 00:15:35","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      Waldo\r\n            public\r\n                  images\r\n            views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" class=\"l-image__centered--medium\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" class=\"l-image__centered--large\" />","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:15:35","2017-10-26 00:15:35","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(65,1,"2017-10-26 00:20:14","2017-10-26 00:20:14","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      Waldo\r\n            public\r\n                  images\r\n            views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:20:14","2017-10-26 00:20:14","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(66,1,"2017-10-26 00:49:51","2017-10-26 00:49:51","","foldericon","","inherit","open","closed","","foldericon","","","2017-10-26 00:49:51","2017-10-26 00:49:51","",56,"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png",0,"attachment","image/png",0),
(67,1,"2017-10-26 00:50:19","2017-10-26 00:50:19","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />Waldo\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />public\r\n                  <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />images\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:50:19","2017-10-26 00:50:19","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(68,1,"2017-10-26 00:51:01","2017-10-26 00:51:01","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\">Waldo\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />public\r\n                  <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />images\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"\" width=\"30\" height=\"23\" class=\"alignnone size-full wp-image-66\" />views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:51:01","2017-10-26 00:51:01","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(69,1,"2017-10-26 00:52:55","2017-10-26 00:52:55","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\">Waldo\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\">public\r\n                  <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\">images\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\">views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:52:55","2017-10-26 00:52:55","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(70,1,"2017-10-26 00:54:35","2017-10-26 00:54:35","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n                  <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n            <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:54:35","2017-10-26 00:54:35","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(71,1,"2017-10-26 00:55:39","2017-10-26 00:55:39","","arrow","","inherit","open","closed","","arrow","","","2017-10-26 00:55:39","2017-10-26 00:55:39","",56,"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png",0,"attachment","image/png",0),
(72,1,"2017-10-26 00:56:38","2017-10-26 00:56:38","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n           <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n                 <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n           <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:56:38","2017-10-26 00:56:38","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(73,1,"2017-10-26 00:58:48","2017-10-26 00:58:48","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS-300x119.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img class=\"l-image__centered--large\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS-300x149.png\" alt=\"Waldo Game Browser Screenshot\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 00:58:48","2017-10-26 00:58:48","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(74,1,"2017-10-26 01:00:38","2017-10-26 01:00:38","","WaldoSS","","inherit","open","closed","","waldoss","","","2017-10-26 01:00:38","2017-10-26 01:00:38","",56,"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png",0,"attachment","image/png",0),
(75,1,"2017-10-26 01:02:00","2017-10-26 01:02:00","<h2>Creating a Gem of a Server</h2>\r\n\r\nFor this section of the tutorial, I\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png\" alt=\"Waldo Game Screenshot\" class=\"l-image__centered--large\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 01:02:00","2017-10-26 01:02:00","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(76,1,"2017-10-26 13:28:59","2017-10-26 13:28:59","For this section of the tutorial, we will be building our server with a Ruby gem called \"Sinatra\". Sinatra is a fantastic gem that allows us to get up and running quickly and easily with a local host server. This will be the back-end powerhouse that does all of the heavy lifting for our Where\'s Waldo game.\r\n\r\nI\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\n<h2>Creating a Gem of a Server</h2>\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png\" alt=\"Waldo Game Screenshot\" class=\"l-image__centered--large\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 13:28:59","2017-10-26 13:28:59","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(77,1,"2017-10-26 13:29:17","2017-10-26 13:29:17","For this section of the tutorial, we will be building our server with a Ruby gem called \"Sinatra\". Sinatra is a fantastic gem that allows us to get up and running quickly and easily with a local host server. This will be the back-end powerhouse that does all of the heavy lifting for our Where\'s Waldo game.\r\n\r\nI\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer at this point in the tutorial. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\n<h2>Creating a Gem of a Server</h2>\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png\" alt=\"Waldo Game Screenshot\" class=\"l-image__centered--large\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 13:29:17","2017-10-26 13:29:17","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0),
(78,1,"2017-10-26 13:31:17","2017-10-26 13:31:17","For this section of the tutorial, we will be building our server with a Ruby gem called \"Sinatra\". Sinatra is a fantastic gem that allows us to get up and running quickly and easily with a local host server. This will be the back-end powerhouse that does all of the heavy lifting for our Where\'s Waldo game. While servers can certainly be intimidating for new developers (and experienced coders as well!), Sinatra makes this step very user friendly.\r\n\r\nI\'ll have to assume that you have both <a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\">Ruby</a> and <a href=\"http://www.sinatrarb.com/\" target=\"_blank\">Sinatra</a> installed on your computer at this point in the tutorial. If you do not currently have these installed, head over <a href=\"https://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\">here</a> for help installing Ruby, and <a href=\"https://www.sitepoint.com/premium/books/jump-start-sinatra/online/ch01s02\" target=\"_blank\">here</a> to install Sinatra.\r\n\r\nThere are a few things that we need to do before we start coding in Sinatra. Sinatra has a very particular folder and file structure that we must adhere to for our site to work, so let\'s set that up now. Your folder structure should be set up like this:\r\n\r\n<pre><span class=\"code__block\">      <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\" alt=\"Folder Icon\" class=\"l-folder__icon\"> Waldo\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> public\r\n             <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> images\r\n       <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/arrow.png\" alt=\"arrow\" class=\"l-folder__icon\"> <img src=\"http://evingrost.dev/wp-content/uploads/2017/10/foldericon.png\"  alt=\"Folder Icon\" class=\"l-folder__icon\"> views</span></pre>\r\n\r\nOur Ruby files will go in the general \"Waldo\" folder, while our helper files such as our CSS stylesheet, JavaScript files, and images folder will go into the \"public\" folder. Our \"views\" folder will contain our individual page files, like the home page and Waldo game pages. Keep in mind that we must adhere to this folder structure exactly, because these are the paths that Sinatra will automatically look in for each file type. If that folder does not exist, or if the file is in the wrong folder, we will get an error message and our site will not run properly.\r\n\r\n<h2>Creating a Gem of a Server</h2>\r\n\r\nNow, we are going to build our server with Sinatra. Lucky for us, Sinatra makes this very simple! Create a new ruby file (<em>file-name.rb</em>) inside of your general \"Waldo\" folder. Here, I call my file \"webController\", but you may use any naming convention that makes sense to you. Inside of that file, write the following few lines of code:\r\n\r\n<pre><span class=\"code__block\">require \'sinatra\'\r\nrequire \'pry\'\r\nrequire \'CSV\'\r\nrequire_relative \'csvMaker.rb\'\r\n\r\nget(\"/\"){\r\n   erb :index\r\n}</span></pre>\r\n\r\nRemember that HTML file that we started with? We\'ll need to modify it very slightly to get it to work in Sinatra. Sinatra does not deal with simple <em>.html</em> files, it prefers to use <em>.erb</em> files, which is short for the \"embedded ruby\" file type. This essentially means that we can use ruby code inside of HTML files. For now, we\'ll stick with HTML only in our <em>.erb</em> file, but it\'s nice to know that it has greater capabilities than that.\r\n\r\nWherever you created your original HTML file, make a copy of it and place that copy into your \"views\" folder, and we\'ll need to rename it to \"index.erb\". This way, Sinatra will be able to identify it as our index HTML file.\r\n\r\n<h2>Testing, Testing</h2>\r\n\r\nAt this point, we want to test that our Sinatra server is working. In your command line, get inside of your general \"Waldo\" folder, and type in this line of code: \"ruby webController.rb\", or if you named your ruby file something else, you\'ll need to use that name instead. You should see several lines of code that start with a time stamp, and \"INFO\", then some more code.\r\n\r\n<img class=\"l-image__centered--medium\" src=\"http://evingrost.dev/wp-content/uploads/2017/10/RubySS.png\" alt=\"Ruby Terminal Screenshot\" />\r\n\r\n<h3>Note: Your server is running from your computer at this point, and it does not refresh itself when you make changes to your files. To close the server, press Ctrl+C inside your terminal. If you\'d like to restart the server and view any changes you\'ve made, close the server and restart it by running your \"ruby webController\" command again. You will need to refresh your browser to see any changes.</h3>\r\n\r\nThis means your server is currently running, and we can check out our website by opening our browser of choice and typing \"localhost:4567\" into the URL. You should see your website up-and-running!\r\n\r\n<img src=\"http://evingrost.dev/wp-content/uploads/2017/10/WaldoSS.png\" alt=\"Waldo Game Screenshot\" class=\"l-image__centered--large\" />\r\n\r\nThough our website is visible at this point, you\'ll notice that our game doesn\'t actually work. This is because we are missing three major functions:\r\n\r\n<ul>\r\n 	<li>We need to ask the server if the recorded x- and y-coordinates that the user clicked on are correct. Have they found Waldo?</li>\r\n 	<li>We need to keep a list of our high scores in a place where the server can access them.</li>\r\n 	<li>If the user has found Waldo, their time must be recorded along with all of the other scores that other players have made.</li>\r\n</ul>\r\n\r\nAfter finishing these up, we will have a working game!","Where\'s Waldo? - Part Three","","inherit","closed","closed","","56-revision-v1","","","2017-10-26 13:31:17","2017-10-26 13:31:17","",56,"http://evingrost.dev/56-revision-v1/",0,"revision","",0);
